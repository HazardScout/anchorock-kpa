"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpectrumUserJob = void 0;
const api_1 = require("../../../base-integration/src/api");
const model_1 = require("../../../base-integration/src/model");
const api_2 = require("../api");
const util_1 = require("util");
class SpectrumUserJob {
    constructor(config) {
        this.name = 'Spectrum User Job';
        this.config = config;
        this.kpaSite = config["kpaSite"]["stringValue"];
        this.kpaToken = config["kpaToken"]["stringValue"];
        this.serverUrl = config["serverUrl"]["stringValue"];
        this.companyCodes = JSON.parse(config["companyCodes"]["stringValue"]);
        this.authorizationId = config["authorizationId"]["stringValue"];
        this.isEditUser = config["isEditUser"]["stringValue"] == '1';
        this.defaultRole = config["defaultRole"]["stringValue"];
        this.welcomeEmail = config["welcomeEmail"]["stringValue"] === '1';
        this.resetPassword = config["resetPassword"]["stringValue"] === '1';
    }
    async execute(status) {
        (0, util_1.debuglog)('log:spectrum:user')("Execute SpectrumUserJob Start");
        //Fetch KPA Users
        let kpaUserAPI = new api_1.KPAUserAPI(this.kpaToken);
        let kpaExistUsers = await kpaUserAPI.getAllUser();
        status.totalExistingRecord = kpaExistUsers.length;
        (0, util_1.debuglog)('log:spectrum:user')(JSON.stringify(kpaExistUsers, null, 2));
        let kpaUsers = [];
        for (var companyCode of this.companyCodes) {
            //Fetch Spectrum Users
            let spectrumAPI = new api_2.SpectrumAPI(this.serverUrl, this.authorizationId, companyCode);
            let users = await spectrumAPI.getUsers();
            status.totalSourceRecord = users.length;
            //Loop Spectrum Users
            for (let user of users) {
                var kpaUser = null;
                for (let i = 0; i < kpaExistUsers.length; i++) {
                    const kpaExistUser = kpaExistUsers[i];
                    const employeeCode = `${companyCode.trim()}-${user.employeeCode.trim()}`;
                    if (kpaExistUser.employeeNumber === employeeCode) {
                        kpaUser = kpaExistUser;
                        kpaExistUsers.splice(i, 1);
                        break;
                    }
                }
                //Build KPA user Data and Check existing
                if (kpaUser == null) {
                    kpaUser = new model_1.KPAUserModel();
                    if (user.employeeStatus !== 'A') {
                        status.skippedRecord++;
                        continue;
                    }
                }
                else {
                    if (!this.isEditUser) {
                        status.skippedRecord++;
                        continue;
                    }
                    if (user.employeeStatus !== 'A') {
                        status.inactivatedRecord++;
                    }
                }
                //Create Users
                kpaUser.employeeNumber = `${companyCode.trim()}-${user.employeeCode.trim()}`;
                kpaUser.firstName = user.firstName;
                kpaUser.lastName = user.lastName;
                kpaUser.username = `${companyCode.trim()}-${user.employeeCode.trim()}`;
                kpaUser.email = '';
                kpaUser.initialPassword = `KPAFlex2024!!`;
                kpaUser.role = this.defaultRole;
                kpaUser.title = user.title;
                kpaUser.welcomeEmail = this.welcomeEmail;
                kpaUser.resetPassword = this.resetPassword;
                if (user.employeeStatus !== 'A' && kpaUser.terminationDate == null) {
                    kpaUser.terminationDate = new Date().toDateString();
                    (0, util_1.debuglog)('log:spectrum:user')(`Need to Check ${kpaUser.terminationDate}`);
                }
                //Add User To List
                kpaUsers.push(kpaUser);
                status.upsertRecord++;
            }
        }
        //Send Data
        (0, util_1.debuglog)('log:spectrum:user')(String(kpaUsers.length));
        const success = await kpaUserAPI.saveUser(this.kpaSite, kpaUsers, this.isEditUser);
        if (!success) {
            throw new Error('Failed to save Users:' + this.config.kpaSite);
        }
        (0, util_1.debuglog)('log:spectrum:user')("Execute SpectrumUserJob Done");
    }
}
exports.SpectrumUserJob = SpectrumUserJob;
//# sourceMappingURL=data:application/json;base64,