"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpectrumAPI = void 0;
const axios_1 = require("axios");
const model_1 = require("../model");
const fast_xml_parser_1 = require("fast-xml-parser");
class SpectrumAPI {
    constructor(serverUrl, authorizationId, companyCode) {
        if (!serverUrl.includes('http')) {
            this.serverUrl = `https://${serverUrl}`;
        }
        else {
            this.serverUrl = serverUrl;
        }
        this.authorizationId = authorizationId;
        this.companyCode = companyCode;
        this.apiInstance = axios_1.default.create({
            baseURL: this.serverUrl
        });
        const token = `${companyCode}:${authorizationId}`;
        this.apiInstance.defaults.headers.common['Authorization'] = `Basic ${btoa(token)}`;
        this.apiInstance.defaults.headers.common['Content-Type'] = `text/plain`;
        const alwaysArray = [
            "SOAP-ENV:Envelope.SOAP-ENV:Body.nis:GetEmployeeResponse.returnArray.returnData.getEmployee.response",
            "SOAP-ENV:Envelope.SOAP-ENV:Body.nis:GetJobResponse.returnArray.returnData.getJob.response",
        ];
        const options = {
            ignoreAttributes: false,
            attributeNamePrefix: "@_",
            isArray: (name, jpath, isLeafNode, isAttribute) => {
                return (alwaysArray.indexOf(jpath) !== -1);
            }
        };
        this.xmlParser = new fast_xml_parser_1.XMLParser(options);
        this.xmlBuilder = new fast_xml_parser_1.XMLBuilder(options);
    }
    async getProjects() {
        const requestJson = {
            '?xml': {
                '@_version': '1.0',
                '@_encoding': 'utf-8'
            },
            'soap:Envelope': {
                '@_xmlns:soap': 'http://schemas.xmlsoap.org/soap/envelope/',
                'soap:Body': {
                    'GetJob': {
                        'Authorization_ID': this.authorizationId,
                        'GUID': '',
                        'pCompany_Code': this.companyCode,
                        'pDivision': '',
                        'pStatus_Code': '',
                        'pProject_Manager': '',
                        'pSuperintendent': '',
                        'pEstimator': '',
                        'pCustomer_Code': '',
                        'pCost_Center': '',
                        'pSort_By': '',
                        '@_xmlns': 'http://www.northgate-is.com/proiv/webservices/types'
                    }
                }
            }
        };
        this.apiInstance.defaults.headers.common['SOAPAction'] = `${this.serverUrl}/ws/GetJob`;
        const xmlData = this.xmlBuilder.build(requestJson);
        const result = [];
        const { data } = await this.apiInstance.post('/ws/GetJob', xmlData);
        const responseData = this.xmlParser.parse(data);
        const projectData = responseData['SOAP-ENV:Envelope']['SOAP-ENV:Body']['nis:GetJobResponse']['returnArray']['returnData']['getJob']['response'];
        for (var project of projectData) {
            result.push(new model_1.SpectrumProjectModel(project));
        }
        return result;
    }
    async getUsers(statusType = '') {
        const requestJson = {
            '?xml': {
                '@_version': '1.0',
                '@_encoding': 'utf-8'
            },
            'soap:Envelope': {
                '@_xmlns:soap': 'http://schemas.xmlsoap.org/soap/envelope/',
                'soap:Body': {
                    'GetEmployee': {
                        'Authorization_ID': this.authorizationId,
                        'GUID': '',
                        'pCompany_Code': this.companyCode,
                        'pWage_Class': '',
                        'pUnion_Code': '',
                        'pOccupation': '',
                        'pTrade': '',
                        'pStatus_Type': statusType,
                        'pCost_Center': '',
                        'pSort_By': '',
                        '@_xmlns': 'http://www.northgate-is.com/proiv/webservices/types'
                    }
                }
            }
        };
        this.apiInstance.defaults.headers.common['SOAPAction'] = `${this.serverUrl}/ws/GetEmployee`;
        const xmlData = this.xmlBuilder.build(requestJson);
        const result = [];
        const { data } = await this.apiInstance.post('/ws/GetEmployee', xmlData);
        const responseData = this.xmlParser.parse(data);
        const employeeData = responseData['SOAP-ENV:Envelope']['SOAP-ENV:Body']['nis:GetEmployeeResponse']['returnArray']['returnData']['getEmployee']['response'];
        for (var user of employeeData) {
            result.push(new model_1.SpectrumUserModel(user));
        }
        return result;
    }
}
exports.SpectrumAPI = SpectrumAPI;
//# sourceMappingURL=data:application/json;base64,