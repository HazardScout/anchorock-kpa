"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpectrumAPI = void 0;
const axios_1 = require("axios");
const model_1 = require("../model");
class SpectrumAPI {
    constructor(clientId, clientSecret) {
        this.apiInstance = axios_1.default.create({
            baseURL: ''
        });
        this.expiredAt = 0;
        this.token = '';
        this.clientId = clientId;
        this.clientSecret = clientSecret;
    }
    async getToken() {
        const { data } = await this.apiInstance.post('/connect/token', {
            'client_id': this.clientId,
            'client_secret': this.clientSecret,
            'scope': 'spectrumapi',
            'grant_type': 'client_credentials'
        });
        this.token = data['access_token'];
        this.expiredAt = new Date().getTime() + data['expires_in'] * 1000;
        this.apiInstance.defaults.headers.common['Authorization'] = `Basic ${this.token}`;
        this.apiInstance.defaults.headers.common['Content-Type'] = 'application/json';
        return true;
    }
    async regenerateSecret() {
        const { data } = await this.apiInstance.post('/secretRotation', {
            'client_id': this.clientId,
            'client_secret': this.clientSecret,
            'scope': 'spectrumapi',
            'grant_type': 'client_credentials'
        });
        const clientSecret = data['client_secret'];
        const estimateExpiration = data['estimated_expiration'];
        console.log(clientSecret);
        console.log(estimateExpiration);
        return true;
    }
    async getProjects() {
        const now = new Date().getTime();
        if (now > this.expiredAt) {
            await this.getToken();
        }
        const result = [];
        const { data } = await this.apiInstance.get('/GetJob');
        for (var project of data) {
            result.push(new model_1.SpectrumProjectModel(project));
        }
        return result;
    }
    async getUsers() {
        const now = new Date().getTime();
        if (now > this.expiredAt) {
            await this.getToken();
        }
        const result = [];
        const { data } = await this.apiInstance.get('/GetEmployee');
        for (var project of data) {
            result.push(new model_1.SpectrumUserModel(project));
        }
        return result;
    }
}
exports.SpectrumAPI = SpectrumAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlY3RydW0tYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3BlY3RydW0taW50ZWdyYXRpb24vZnVuY3Rpb24vYXBpL3NwZWN0cnVtLWFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpQ0FBcUM7QUFDckMsb0NBQW1FO0FBRW5FLE1BQWEsV0FBVztJQU9wQixZQUFZLFFBQWdCLEVBQUUsWUFBb0I7UUFDOUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxlQUFLLENBQUMsTUFBTSxDQUFDO1lBQzVCLE9BQU8sRUFBRSxFQUFFO1NBQ2QsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7SUFDckMsQ0FBQztJQUVPLEtBQUssQ0FBQyxRQUFRO1FBQ2xCLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQzNELFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUMxQixlQUFlLEVBQUUsSUFBSSxDQUFDLFlBQVk7WUFDbEMsT0FBTyxFQUFFLGFBQWE7WUFDdEIsWUFBWSxFQUFFLG9CQUFvQjtTQUNyQyxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQTtRQUNqQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksQ0FBQTtRQUdqRSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFHLFNBQVMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ2pGLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsa0JBQWtCLENBQUM7UUFDOUUsT0FBTyxJQUFJLENBQUE7SUFDZixDQUFDO0lBRU8sS0FBSyxDQUFDLGdCQUFnQjtRQUMxQixNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUM1RCxXQUFXLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDMUIsZUFBZSxFQUFFLElBQUksQ0FBQyxZQUFZO1lBQ2xDLE9BQU8sRUFBRSxhQUFhO1lBQ3RCLFlBQVksRUFBRSxvQkFBb0I7U0FDckMsQ0FBQyxDQUFBO1FBRUYsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFBO1FBQzFDLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUE7UUFDdkQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUN6QixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUE7UUFDL0IsT0FBTyxJQUFJLENBQUE7SUFDZixDQUFDO0lBRUQsS0FBSyxDQUFDLFdBQVc7UUFDYixNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ2hDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUN2QixNQUFNLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQTtRQUN6QixDQUFDO1FBRUQsTUFBTSxNQUFNLEdBQTJCLEVBQUUsQ0FBQztRQUMxQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUN0RCxLQUFJLElBQUksT0FBTyxJQUFJLElBQUksRUFBRSxDQUFDO1lBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSw0QkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO1FBQ2xELENBQUM7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQsS0FBSyxDQUFDLFFBQVE7UUFDVixNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ2hDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUN2QixNQUFNLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQTtRQUN6QixDQUFDO1FBRUQsTUFBTSxNQUFNLEdBQXdCLEVBQUUsQ0FBQztRQUN2QyxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQTtRQUMzRCxLQUFJLElBQUksT0FBTyxJQUFJLElBQUksRUFBRSxDQUFDO1lBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSx5QkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO1FBQy9DLENBQUM7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0NBQ0o7QUEvRUQsa0NBK0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zLCB7IEF4aW9zIH0gZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQgeyBTcGVjdHJ1bVByb2plY3RNb2RlbCwgU3BlY3RydW1Vc2VyTW9kZWwgfSBmcm9tIFwiLi4vbW9kZWxcIjtcblxuZXhwb3J0IGNsYXNzIFNwZWN0cnVtQVBJIHtcbiAgICBwcml2YXRlIGFwaUluc3RhbmNlOiBBeGlvcztcbiAgICBwcml2YXRlIGV4cGlyZWRBdDogbnVtYmVyO1xuICAgIHByaXZhdGUgdG9rZW46IHN0cmluZztcbiAgICBwcml2YXRlIGNsaWVudElkOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBjbGllbnRTZWNyZXQ6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGNsaWVudElkOiBzdHJpbmcsIGNsaWVudFNlY3JldDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuYXBpSW5zdGFuY2UgPSBheGlvcy5jcmVhdGUoe1xuICAgICAgICAgICAgYmFzZVVSTDogJydcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLmV4cGlyZWRBdCA9IDA7XG4gICAgICAgIHRoaXMudG9rZW4gPSAnJztcbiAgICAgICAgdGhpcy5jbGllbnRJZCA9IGNsaWVudElkO1xuICAgICAgICB0aGlzLmNsaWVudFNlY3JldCA9IGNsaWVudFNlY3JldDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGdldFRva2VuKCkgOiBQcm9taXNlPEJvb2xlYW4+IHtcbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLmFwaUluc3RhbmNlLnBvc3QoJy9jb25uZWN0L3Rva2VuJywge1xuICAgICAgICAgICAgJ2NsaWVudF9pZCc6IHRoaXMuY2xpZW50SWQsXG4gICAgICAgICAgICAnY2xpZW50X3NlY3JldCc6IHRoaXMuY2xpZW50U2VjcmV0LFxuICAgICAgICAgICAgJ3Njb3BlJzogJ3NwZWN0cnVtYXBpJyxcbiAgICAgICAgICAgICdncmFudF90eXBlJzogJ2NsaWVudF9jcmVkZW50aWFscydcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLnRva2VuID0gZGF0YVsnYWNjZXNzX3Rva2VuJ11cbiAgICAgICAgdGhpcy5leHBpcmVkQXQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSArIGRhdGFbJ2V4cGlyZXNfaW4nXSAqIDEwMDBcblxuXG4gICAgICAgIHRoaXMuYXBpSW5zdGFuY2UuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ0F1dGhvcml6YXRpb24nXSA9IGBCYXNpYyAke3RoaXMudG9rZW59YFxuICAgICAgICB0aGlzLmFwaUluc3RhbmNlLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHJlZ2VuZXJhdGVTZWNyZXQoKSA6IFByb21pc2U8Qm9vbGVhbj4ge1xuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuYXBpSW5zdGFuY2UucG9zdCgnL3NlY3JldFJvdGF0aW9uJywge1xuICAgICAgICAgICAgJ2NsaWVudF9pZCc6IHRoaXMuY2xpZW50SWQsXG4gICAgICAgICAgICAnY2xpZW50X3NlY3JldCc6IHRoaXMuY2xpZW50U2VjcmV0LFxuICAgICAgICAgICAgJ3Njb3BlJzogJ3NwZWN0cnVtYXBpJyxcbiAgICAgICAgICAgICdncmFudF90eXBlJzogJ2NsaWVudF9jcmVkZW50aWFscydcbiAgICAgICAgfSlcblxuICAgICAgICBjb25zdCBjbGllbnRTZWNyZXQgPSBkYXRhWydjbGllbnRfc2VjcmV0J11cbiAgICAgICAgY29uc3QgZXN0aW1hdGVFeHBpcmF0aW9uID0gZGF0YVsnZXN0aW1hdGVkX2V4cGlyYXRpb24nXVxuICAgICAgICBjb25zb2xlLmxvZyhjbGllbnRTZWNyZXQpXG4gICAgICAgIGNvbnNvbGUubG9nKGVzdGltYXRlRXhwaXJhdGlvbilcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBhc3luYyBnZXRQcm9qZWN0cygpIDogUHJvbWlzZTxTcGVjdHJ1bVByb2plY3RNb2RlbFtdPiB7XG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpXG4gICAgICAgIGlmIChub3cgPiB0aGlzLmV4cGlyZWRBdCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5nZXRUb2tlbigpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXN1bHQ6IFNwZWN0cnVtUHJvamVjdE1vZGVsW10gPSBbXTtcbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLmFwaUluc3RhbmNlLmdldCgnL0dldEpvYicpXG4gICAgICAgIGZvcih2YXIgcHJvamVjdCBvZiBkYXRhKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChuZXcgU3BlY3RydW1Qcm9qZWN0TW9kZWwocHJvamVjdCkpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gXG5cbiAgICBhc3luYyBnZXRVc2VycygpIDogUHJvbWlzZTxTcGVjdHJ1bVVzZXJNb2RlbFtdPiB7XG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpXG4gICAgICAgIGlmIChub3cgPiB0aGlzLmV4cGlyZWRBdCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5nZXRUb2tlbigpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXN1bHQ6IFNwZWN0cnVtVXNlck1vZGVsW10gPSBbXTtcbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLmFwaUluc3RhbmNlLmdldCgnL0dldEVtcGxveWVlJylcbiAgICAgICAgZm9yKHZhciBwcm9qZWN0IG9mIGRhdGEpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ldyBTcGVjdHJ1bVVzZXJNb2RlbChwcm9qZWN0KSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBcbn0iXX0=