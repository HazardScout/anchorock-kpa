"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProcoreAPI = void 0;
const axios_1 = require("axios");
const model_1 = require("../model");
class ProcoreAPI {
    constructor(auth, resaveToken) {
        this.auth = auth;
        this.resaveToken = resaveToken;
        this.authInstance = axios_1.default.create({
            baseURL: 'https://login.procore.com/oauth/token/'
            // baseURL: 'https://login-sandbox.procore.com/oauth/token/'
        });
        this.authInstance.defaults.headers.post['Accept'] = 'application/json';
        this.authInstance.defaults.headers.post['Content-Type'] = 'application/json';
        this.apiInstance = axios_1.default.create({
            baseURL: 'https://api.procore.com/rest/v1.0/'
            // baseURL: 'https://sandbox.procore.com/rest/v1.0/'
        });
        this.apiInstance.defaults.headers.common['Authorization'] = `Bearer ${auth.accessToken}`;
        this.apiInstance.defaults.headers.post['Accept'] = 'application/json';
        this.apiInstance.defaults.headers.post['Content-Type'] = 'application/json';
    }
    async refreshToken() {
        var _a;
        try {
            const { data } = await this.authInstance.post('', { grant_type: 'refresh_token', refresh_token: this.auth.refreshToken });
            const accessToken = data['access_token'];
            const refreshToken = data['refresh_token'];
            return new model_1.procoreContext(accessToken, refreshToken);
        }
        catch (e) {
            throw new Error(JSON.stringify(((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) || e));
        }
    }
    async getCompanies() {
        var _a, _b;
        const result = [];
        try {
            const { data } = await this.apiInstance
                .get('/companies');
            for (var companyData of data) {
                let company = Object.assign(new model_1.ProcoreCompanyModel(), companyData);
                result.push(company);
            }
        }
        catch (e) {
            //For some reason, Cannot acess status on error Response
            const errorResponse = JSON.parse(JSON.stringify(e));
            if (errorResponse['status'] == 401) {
                //Break Code - Temporary
                if (this.auth.refreshToken === '1') {
                    throw new Error(JSON.stringify(((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) || e));
                }
                this.auth = await this.refreshToken();
                await this.resaveToken(this.auth);
                this.apiInstance.defaults.headers.common['Authorization'] = `Bearer ${this.auth.accessToken}`;
                return await this.getCompanies();
            }
            else {
                throw new Error(JSON.stringify(((_b = e.response) === null || _b === void 0 ? void 0 : _b.data) || e));
            }
        }
        return result;
    }
    async getProjects(companyId) {
        var _a, _b;
        const result = [];
        try {
            const { data } = await this.apiInstance
                .get('/projects', { params: { company_id: companyId }, headers: { 'Procore-Company-Id': `${companyId}` } });
            for (var projectData of data) {
                let project = Object.assign(new model_1.ProcoreCompanyModel(), projectData);
                result.push(project);
            }
        }
        catch (e) {
            //For some reason, Cannot acess status on error Response
            const errorResponse = JSON.parse(JSON.stringify(e));
            if (errorResponse['status'] == 401) {
                //Break Code - Temporary
                if (this.auth.refreshToken === '1') {
                    throw new Error(JSON.stringify(((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) || e));
                }
                this.auth = await this.refreshToken();
                await this.resaveToken(this.auth);
                this.apiInstance.defaults.headers.common['Authorization'] = `Bearer ${this.auth.accessToken}`;
                return await this.getProjects(companyId);
            }
            else {
                throw new Error(JSON.stringify(((_b = e.response) === null || _b === void 0 ? void 0 : _b.data) || e));
            }
        }
        return result;
    }
    async getUsers(companyId) {
        var _a, _b;
        const result = [];
        try {
            const { data } = await this.apiInstance
                .get('/users', { params: { company_id: companyId }, headers: { 'Procore-Company-Id': `${companyId}` } });
            for (var userData of data) {
                let user = Object.assign(new model_1.ProcoreUserModel(), userData);
                result.push(user);
            }
        }
        catch (e) {
            //For some reason, Cannot acess status on error Response
            const errorResponse = JSON.parse(JSON.stringify(e));
            if (errorResponse['status'] == 401) {
                //Break Code - Temporary
                if (this.auth.refreshToken === '1') {
                    throw new Error(JSON.stringify(((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) || e));
                }
                this.auth = await this.refreshToken();
                ;
                await this.resaveToken(this.auth);
                this.apiInstance.defaults.headers.common['Authorization'] = `Bearer ${this.auth.accessToken}`;
                return await this.getUsers(companyId);
            }
            else {
                throw new Error(JSON.stringify(((_b = e.response) === null || _b === void 0 ? void 0 : _b.data) || e));
            }
        }
        return result;
    }
}
exports.ProcoreAPI = ProcoreAPI;
//# sourceMappingURL=data:application/json;base64,