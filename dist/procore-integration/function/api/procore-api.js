"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProcoreAPI = void 0;
const axios_1 = require("axios");
const model_1 = require("../model");
class ProcoreAPI {
    constructor(auth, resaveToken) {
        this.auth = auth;
        this.resaveToken = resaveToken;
        this.authInstance = axios_1.default.create({
            // baseURL: 'https://login.procore.com/oauth/token/'
            baseURL: 'https://login-sandbox.procore.com/oauth/token/'
        });
        this.authInstance.defaults.headers.post['Accept'] = 'application/json';
        this.authInstance.defaults.headers.post['Content-Type'] = 'application/json';
        this.apiInstance = axios_1.default.create({
            // baseURL: 'https://api.procore.com/rest/v1.0/'
            baseURL: 'https://sandbox.procore.com/rest/v1.0/'
        });
        this.apiInstance.defaults.headers.common['Authorization'] = `Bearer ${auth.accessToken}`;
        this.apiInstance.defaults.headers.post['Accept'] = 'application/json';
        this.apiInstance.defaults.headers.post['Content-Type'] = 'application/json';
    }
    async refreshToken() {
        var _a;
        try {
            const { data } = await this.authInstance.post('', {
                grant_type: 'refresh_token',
                refresh_token: this.auth.refreshToken,
                client_id: this.auth.clientId,
                client_secret: this.auth.clientSecret
            });
            const accessToken = data['access_token'];
            const refreshToken = data['refresh_token'];
            return new model_1.procoreContext(accessToken, refreshToken);
        }
        catch (e) {
            throw new Error(JSON.stringify(((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) || e));
        }
    }
    async getCompanies() {
        var _a;
        const result = [];
        try {
            const { data } = await this.apiInstance
                .get('/companies');
            for (var companyData of data) {
                let company = Object.assign(new model_1.ProcoreCompanyModel(), companyData);
                result.push(company);
            }
        }
        catch (e) {
            //For some reason, Cannot acess status on error Response
            const errorResponse = JSON.parse(JSON.stringify(e));
            if (errorResponse['status'] == 401) {
                this.auth = await this.refreshToken();
                await this.resaveToken(this.auth);
                this.apiInstance.defaults.headers.common['Authorization'] = `Bearer ${this.auth.accessToken}`;
                return await this.getCompanies();
            }
            else {
                throw new Error(JSON.stringify(((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) || e));
            }
        }
        return result;
    }
    async getProjects(companyId) {
        var _a;
        const result = [];
        try {
            const { data } = await this.apiInstance
                .get('/projects', { params: { company_id: companyId, 'filters[by_status]': 'All' }, headers: { 'Procore-Company-Id': `${companyId}` } });
            for (var projectData of data) {
                let project = Object.assign(new model_1.ProcoreProjectModel(), projectData);
                result.push(project);
            }
        }
        catch (e) {
            //For some reason, Cannot acess status on error Response
            const errorResponse = JSON.parse(JSON.stringify(e));
            if (errorResponse['status'] == 401) {
                this.auth = await this.refreshToken();
                await this.resaveToken(this.auth);
                this.apiInstance.defaults.headers.common['Authorization'] = `Bearer ${this.auth.accessToken}`;
                return await this.getProjects(companyId);
            }
            else {
                throw new Error(JSON.stringify(((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) || e));
            }
        }
        return result;
    }
    async getUsers(companyId) {
        var _a;
        const result = [];
        try {
            const { data } = await this.apiInstance
                .get('/users', { params: { company_id: companyId }, headers: { 'Procore-Company-Id': `${companyId}` } });
            for (var userData of data) {
                let user = Object.assign(new model_1.ProcoreUserModel(), userData);
                result.push(user);
            }
        }
        catch (e) {
            //For some reason, Cannot acess status on error Response
            const errorResponse = JSON.parse(JSON.stringify(e));
            if (errorResponse['status'] == 401) {
                this.auth = await this.refreshToken();
                ;
                await this.resaveToken(this.auth);
                this.apiInstance.defaults.headers.common['Authorization'] = `Bearer ${this.auth.accessToken}`;
                return await this.getUsers(companyId);
            }
            else {
                throw new Error(JSON.stringify(((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) || e));
            }
        }
        return result;
    }
}
exports.ProcoreAPI = ProcoreAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY29yZS1hcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9jb3JlLWludGVncmF0aW9uL2Z1bmN0aW9uL2FwaS9wcm9jb3JlLWFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpQ0FBcUM7QUFDckMsb0NBQXNHO0FBRXRHLE1BQWEsVUFBVTtJQU1uQixZQUFZLElBQW9CLEVBQUUsV0FBb0Q7UUFDbEYsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFFL0IsSUFBSSxDQUFDLFlBQVksR0FBRyxlQUFLLENBQUMsTUFBTSxDQUFDO1lBQzdCLG9EQUFvRDtZQUNwRCxPQUFPLEVBQUUsZ0RBQWdEO1NBQzVELENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsa0JBQWtCLENBQUM7UUFDdkUsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxrQkFBa0IsQ0FBQztRQUU3RSxJQUFJLENBQUMsV0FBVyxHQUFHLGVBQUssQ0FBQyxNQUFNLENBQUM7WUFDNUIsZ0RBQWdEO1lBQ2hELE9BQU8sRUFBRSx3Q0FBd0M7U0FDcEQsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBRyxVQUFVLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN6RixJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLGtCQUFrQixDQUFDO1FBQ3RFLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxD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QUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUEsTUFBQSxDQUFDLENBQUMsUUFBUSwwQ0FBRSxJQUFJLEtBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzRCxDQUFDO1FBQ0wsQ0FBQztRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7Q0FFSjtBQTVIRCxnQ0E0SEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MsIHsgQXhpb3MgfSBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCB7IHByb2NvcmVDb250ZXh0LCBQcm9jb3JlQ29tcGFueU1vZGVsLCBQcm9jb3JlUHJvamVjdE1vZGVsLCBQcm9jb3JlVXNlck1vZGVsIH0gZnJvbSBcIi4uL21vZGVsXCI7XG5cbmV4cG9ydCBjbGFzcyBQcm9jb3JlQVBJIHtcbiAgICBhdXRoOiBwcm9jb3JlQ29udGV4dDtcbiAgICBhdXRoSW5zdGFuY2U6IEF4aW9zO1xuICAgIGFwaUluc3RhbmNlOiBBeGlvcztcbiAgICByZXNhdmVUb2tlbjogKGF1dGg6IHByb2NvcmVDb250ZXh0KSA9PiBQcm9taXNlPHZvaWQ+O1xuXG4gICAgY29uc3RydWN0b3IoYXV0aDogcHJvY29yZUNvbnRleHQsIHJlc2F2ZVRva2VuOiAoYXV0aDogcHJvY29yZUNvbnRleHQpID0+IFByb21pc2U8dm9pZD4pIHtcbiAgICAgICAgdGhpcy5hdXRoID0gYXV0aDtcbiAgICAgICAgdGhpcy5yZXNhdmVUb2tlbiA9IHJlc2F2ZVRva2VuO1xuXG4gICAgICAgIHRoaXMuYXV0aEluc3RhbmNlID0gYXhpb3MuY3JlYXRlKHtcbiAgICAgICAgICAgIC8vIGJhc2VVUkw6ICdodHRwczovL2xvZ2luLnByb2NvcmUuY29tL29hdXRoL3Rva2VuLydcbiAgICAgICAgICAgIGJhc2VVUkw6ICdodHRwczovL2xvZ2luLXNhbmRib3gucHJvY29yZS5jb20vb2F1dGgvdG9rZW4vJ1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmF1dGhJbnN0YW5jZS5kZWZhdWx0cy5oZWFkZXJzLnBvc3RbJ0FjY2VwdCddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICB0aGlzLmF1dGhJbnN0YW5jZS5kZWZhdWx0cy5oZWFkZXJzLnBvc3RbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgICAgIHRoaXMuYXBpSW5zdGFuY2UgPSBheGlvcy5jcmVhdGUoe1xuICAgICAgICAgICAgLy8gYmFzZVVSTDogJ2h0dHBzOi8vYXBpLnByb2NvcmUuY29tL3Jlc3QvdjEuMC8nXG4gICAgICAgICAgICBiYXNlVVJMOiAnaHR0cHM6Ly9zYW5kYm94LnByb2NvcmUuY29tL3Jlc3QvdjEuMC8nXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYXBpSW5zdGFuY2UuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ0F1dGhvcml6YXRpb24nXSA9IGBCZWFyZXIgJHthdXRoLmFjY2Vzc1Rva2VufWA7XG4gICAgICAgIHRoaXMuYXBpSW5zdGFuY2UuZGVmYXVsdHMuaGVhZGVycy5wb3N0WydBY2NlcHQnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgICAgdGhpcy5hcGlJbnN0YW5jZS5kZWZhdWx0cy5oZWFkZXJzLnBvc3RbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgIH1cblxuICAgIGFzeW5jIHJlZnJlc2hUb2tlbigpOiBQcm9taXNlPHByb2NvcmVDb250ZXh0PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuYXV0aEluc3RhbmNlLnBvc3QoJycsIHtcbiAgICAgICAgICAgICAgICBncmFudF90eXBlOiAncmVmcmVzaF90b2tlbicsIFxuICAgICAgICAgICAgICAgIHJlZnJlc2hfdG9rZW46IHRoaXMuYXV0aC5yZWZyZXNoVG9rZW4sIFxuICAgICAgICAgICAgICAgIGNsaWVudF9pZDogdGhpcy5hdXRoLmNsaWVudElkLCBcbiAgICAgICAgICAgICAgICBjbGllbnRfc2VjcmV0OiB0aGlzLmF1dGguY2xpZW50U2VjcmV0XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29uc3QgYWNjZXNzVG9rZW4gPSBkYXRhWydhY2Nlc3NfdG9rZW4nXTtcbiAgICAgICAgICAgIGNvbnN0IHJlZnJlc2hUb2tlbiA9IGRhdGFbJ3JlZnJlc2hfdG9rZW4nXTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgcHJvY29yZUNvbnRleHQoYWNjZXNzVG9rZW4sIHJlZnJlc2hUb2tlbik7XG4gICAgICAgIH0gY2F0Y2goZTphbnkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihKU09OLnN0cmluZ2lmeShlLnJlc3BvbnNlPy5kYXRhIHx8IGUpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGdldENvbXBhbmllcygpICA6IFByb21pc2U8UHJvY29yZUNvbXBhbnlNb2RlbFtdPntcbiAgICAgICAgY29uc3QgcmVzdWx0OiBQcm9jb3JlQ29tcGFueU1vZGVsW10gPSBbXTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy5hcGlJbnN0YW5jZVxuICAgICAgICAgICAgLmdldCgnL2NvbXBhbmllcycpXG4gICAgICAgICAgICBmb3IgKHZhciBjb21wYW55RGF0YSBvZiBkYXRhKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNvbXBhbnkgPSBPYmplY3QuYXNzaWduKG5ldyBQcm9jb3JlQ29tcGFueU1vZGVsKCksIGNvbXBhbnlEYXRhKTtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChjb21wYW55KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaChlOmFueSkge1xuICAgICAgICAgICAgLy9Gb3Igc29tZSByZWFzb24sIENhbm5vdCBhY2VzcyBzdGF0dXMgb24gZXJyb3IgUmVzcG9uc2VcbiAgICAgICAgICAgIGNvbnN0IGVycm9yUmVzcG9uc2UgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGUpKTtcbiAgICAgICAgICAgIGlmIChlcnJvclJlc3BvbnNlWydzdGF0dXMnXSA9PSA0MDEpIHtcblxuICAgICAgICAgICAgICAgIHRoaXMuYXV0aCA9IGF3YWl0IHRoaXMucmVmcmVzaFRva2VuKCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5yZXNhdmVUb2tlbih0aGlzLmF1dGgpXG5cbiAgICAgICAgICAgICAgICB0aGlzLmFwaUluc3RhbmNlLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydBdXRob3JpemF0aW9uJ10gPSBgQmVhcmVyICR7dGhpcy5hdXRoLmFjY2Vzc1Rva2VufWA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0Q29tcGFuaWVzKClcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KGUucmVzcG9uc2U/LmRhdGEgfHwgZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0UHJvamVjdHMoY29tcGFueUlkOiBudW1iZXIpIDogUHJvbWlzZTxQcm9jb3JlUHJvamVjdE1vZGVsW10+IHtcblxuICAgICAgICBjb25zdCByZXN1bHQ6IFByb2NvcmVQcm9qZWN0TW9kZWxbXSA9IFtdO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLmFwaUluc3RhbmNlXG4gICAgICAgICAgICAuZ2V0KCcvcHJvamVjdHMnLCB7IHBhcmFtczogeyBjb21wYW55X2lkOiBjb21wYW55SWQsICdmaWx0ZXJzW2J5X3N0YXR1c10nOiAnQWxsJyB9ICwgaGVhZGVyczogeyAnUHJvY29yZS1Db21wYW55LUlkJzogYCR7Y29tcGFueUlkfWB9fSlcbiAgICAgICAgICAgIGZvciAodmFyIHByb2plY3REYXRhIG9mIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBsZXQgcHJvamVjdCA9IE9iamVjdC5hc3NpZ24obmV3IFByb2NvcmVQcm9qZWN0TW9kZWwoKSwgcHJvamVjdERhdGEpO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHByb2plY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoKGU6YW55KSB7XG4gICAgICAgICAgICAvL0ZvciBzb21lIHJlYXNvbiwgQ2Fubm90IGFjZXNzIHN0YXR1cyBvbiBlcnJvciBSZXNwb25zZVxuICAgICAgICAgICAgY29uc3QgZXJyb3JSZXNwb25zZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZSkpO1xuICAgICAgICAgICAgaWYgKGVycm9yUmVzcG9uc2VbJ3N0YXR1cyddID09IDQwMSkge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5hdXRoID0gYXdhaXQgdGhpcy5yZWZyZXNoVG9rZW4oKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnJlc2F2ZVRva2VuKHRoaXMuYXV0aClcblxuICAgICAgICAgICAgICAgIHRoaXMuYXBpSW5zdGFuY2UuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ0F1dGhvcml6YXRpb24nXSA9IGBCZWFyZXIgJHt0aGlzLmF1dGguYWNjZXNzVG9rZW59YDtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRQcm9qZWN0cyhjb21wYW55SWQpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihKU09OLnN0cmluZ2lmeShlLnJlc3BvbnNlPy5kYXRhIHx8IGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGFzeW5jIGdldFVzZXJzKGNvbXBhbnlJZDogbnVtYmVyKSA6IFByb21pc2U8UHJvY29yZVVzZXJNb2RlbFtdPiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdDogUHJvY29yZVVzZXJNb2RlbFtdID0gW107XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuYXBpSW5zdGFuY2VcbiAgICAgICAgICAgIC5nZXQoJy91c2VycycsIHsgcGFyYW1zOiB7IGNvbXBhbnlfaWQ6IGNvbXBhbnlJZCB9ICwgaGVhZGVyczogeyAnUHJvY29yZS1Db21wYW55LUlkJzogYCR7Y29tcGFueUlkfWB9fSlcbiAgICAgICAgICAgIGZvciAodmFyIHVzZXJEYXRhIG9mIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBsZXQgdXNlciA9IE9iamVjdC5hc3NpZ24obmV3IFByb2NvcmVVc2VyTW9kZWwoKSwgdXNlckRhdGEpO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHVzZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoKGU6YW55KSB7XG4gICAgICAgICAgICAvL0ZvciBzb21lIHJlYXNvbiwgQ2Fubm90IGFjZXNzIHN0YXR1cyBvbiBlcnJvciBSZXNwb25zZVxuICAgICAgICAgICAgY29uc3QgZXJyb3JSZXNwb25zZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZSkpO1xuICAgICAgICAgICAgaWYgKGVycm9yUmVzcG9uc2VbJ3N0YXR1cyddID09IDQwMSkge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5hdXRoID0gYXdhaXQgdGhpcy5yZWZyZXNoVG9rZW4oKTs7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5yZXNhdmVUb2tlbih0aGlzLmF1dGgpXG5cbiAgICAgICAgICAgICAgICB0aGlzLmFwaUluc3RhbmNlLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydBdXRob3JpemF0aW9uJ10gPSBgQmVhcmVyICR7dGhpcy5hdXRoLmFjY2Vzc1Rva2VufWA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0VXNlcnMoY29tcGFueUlkKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSlNPTi5zdHJpbmdpZnkoZS5yZXNwb25zZT8uZGF0YSB8fCBlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbn1cbiJdfQ==