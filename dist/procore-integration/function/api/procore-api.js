"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProcoreAPI = void 0;
const axios_1 = require("axios");
const model_1 = require("../model");
class ProcoreAPI {
    constructor(auth, resaveToken) {
        this.auth = auth;
        this.resaveToken = resaveToken;
        this.authInstance = axios_1.default.create({
            baseURL: 'https://login.procore.com/oauth/token/'
            // baseURL: 'https://login-sandbox.procore.com/oauth/token/'
        });
        this.authInstance.defaults.headers.post['Accept'] = 'application/json';
        this.authInstance.defaults.headers.post['Content-Type'] = 'application/json';
        this.apiInstance = axios_1.default.create({
            baseURL: 'https://api.procore.com/rest/v1.0/'
            // baseURL: 'https://sandbox.procore.com/rest/v1.0/'
        });
        this.apiInstance.defaults.headers.common['Authorization'] = `Bearer ${auth.accessToken}`;
        this.apiInstance.defaults.headers.post['Accept'] = 'application/json';
        this.apiInstance.defaults.headers.post['Content-Type'] = 'application/json';
    }
    async refreshToken() {
        try {
            const { data } = await this.authInstance.post('', { grant_type: 'refresh_token', refresh_token: this.auth.refreshToken });
            const accessToken = data['access_token'];
            const refreshToken = data['refresh_token'];
            return new model_1.procoreContext(accessToken, refreshToken);
        }
        catch (e) {
            throw { 'message': 'Refresh Token Failed' };
        }
    }
    async getCompanies() {
        const result = [];
        try {
            const { data } = await this.apiInstance
                .get('/companies');
            for (var companyData of data) {
                let company = Object.assign(new model_1.ProcoreCompanyModel(), companyData);
                result.push(company);
            }
        }
        catch (e) {
            //For some reason, Cannot acess status on error Response
            const errorResponse = JSON.parse(JSON.stringify(e));
            if (errorResponse['status'] == 401) {
                //Break Code - Temporary
                if (this.auth.refreshToken === '1') {
                    throw { 'message': 'Request Failed - Invalid token and refresh token' };
                }
                this.auth = await this.refreshToken();
                await this.resaveToken(this.auth);
                this.apiInstance.defaults.headers.common['Authorization'] = `Bearer ${this.auth.accessToken}`;
                return await this.getCompanies();
            }
            else {
                throw { 'message': 'Request Failed' };
            }
        }
        return result;
    }
    async getProjects(companyId) {
        const result = [];
        try {
            const { data } = await this.apiInstance
                .get('/projects', { params: { company_id: companyId }, headers: { 'Procore-Company-Id': `${companyId}` } });
            for (var projectData of data) {
                let project = Object.assign(new model_1.ProcoreCompanyModel(), projectData);
                result.push(project);
            }
        }
        catch (e) {
            //For some reason, Cannot acess status on error Response
            const errorResponse = JSON.parse(JSON.stringify(e));
            if (errorResponse['status'] == 401) {
                //Break Code - Temporary
                if (this.auth.refreshToken === '1') {
                    throw { 'message': 'Request Failed - Invalid token and refresh token' };
                }
                this.auth = await this.refreshToken();
                await this.resaveToken(this.auth);
                this.apiInstance.defaults.headers.common['Authorization'] = `Bearer ${this.auth.accessToken}`;
                return await this.getProjects(companyId);
            }
            else {
                throw { 'message': 'Request Failed' };
            }
        }
        return result;
    }
    async getUsers(companyId) {
        const result = [];
        try {
            const { data } = await this.apiInstance
                .get('/users', { params: { company_id: companyId }, headers: { 'Procore-Company-Id': `${companyId}` } });
            for (var userData of data) {
                let user = Object.assign(new model_1.ProcoreUserModel(), userData);
                result.push(user);
            }
        }
        catch (e) {
            //For some reason, Cannot acess status on error Response
            const errorResponse = JSON.parse(JSON.stringify(e));
            if (errorResponse['status'] == 401) {
                //Break Code - Temporary
                if (this.auth.refreshToken === '1') {
                    throw { 'message': 'Request Failed - Invalid token and refresh token' };
                }
                this.auth = await this.refreshToken();
                ;
                await this.resaveToken(this.auth);
                this.apiInstance.defaults.headers.common['Authorization'] = `Bearer ${this.auth.accessToken}`;
                return await this.getUsers(companyId);
            }
            else {
                throw { 'message': 'Request Failed' };
            }
        }
        return result;
    }
}
exports.ProcoreAPI = ProcoreAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY29yZS1hcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9jb3JlLWludGVncmF0aW9uL2Z1bmN0aW9uL2FwaS9wcm9jb3JlLWFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpQ0FBcUM7QUFDckMsb0NBQXNHO0FBRXRHLE1BQWEsVUFBVTtJQU1uQixZQUFZLElBQW9CLEVBQUUsV0FBb0Q7UUFDbEYsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFFL0IsSUFBSSxDQUFDLFlBQVksR0FBRyxlQUFLLENBQUMsTUFBTSxDQUFDO1lBQzdCLE9BQU8sRUFBRSx3Q0FBd0M7WUFDakQsNERBQTREO1NBQy9ELENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsa0JBQWtCLENBQUM7UUFDdkUsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxrQkFBa0IsQ0FBQztRQUU3RSxJQUFJLENBQUMsV0FBVyxHQUFHLGVBQUssQ0FBQyxNQUFNLENBQUM7WUFDNUIsT0FBTyxFQUFFLG9DQUFvQztZQUM3QyxvREFBb0Q7U0FDdkQsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBRyxVQUFVLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN6RixJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLGtCQUFrQixDQUFDO1FBQ3RFLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxD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QU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQTtZQUN6QyxDQUFDO2lCQUFNLENBQUM7Z0JBQ0osTUFBTSxFQUFDLFNBQVMsRUFBQyxnQkFBZ0IsRUFBQyxDQUFDO1lBQ3ZDLENBQUM7UUFDTCxDQUFDO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztDQUVKO0FBdElELGdDQXNJQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcywgeyBBeGlvcyB9IGZyb20gXCJheGlvc1wiO1xuaW1wb3J0IHsgcHJvY29yZUNvbnRleHQsIFByb2NvcmVDb21wYW55TW9kZWwsIFByb2NvcmVQcm9qZWN0TW9kZWwsIFByb2NvcmVVc2VyTW9kZWwgfSBmcm9tIFwiLi4vbW9kZWxcIjtcblxuZXhwb3J0IGNsYXNzIFByb2NvcmVBUEkge1xuICAgIGF1dGg6IHByb2NvcmVDb250ZXh0O1xuICAgIGF1dGhJbnN0YW5jZTogQXhpb3M7XG4gICAgYXBpSW5zdGFuY2U6IEF4aW9zO1xuICAgIHJlc2F2ZVRva2VuOiAoYXV0aDogcHJvY29yZUNvbnRleHQpID0+IFByb21pc2U8dm9pZD47XG5cbiAgICBjb25zdHJ1Y3RvcihhdXRoOiBwcm9jb3JlQ29udGV4dCwgcmVzYXZlVG9rZW46IChhdXRoOiBwcm9jb3JlQ29udGV4dCkgPT4gUHJvbWlzZTx2b2lkPikge1xuICAgICAgICB0aGlzLmF1dGggPSBhdXRoO1xuICAgICAgICB0aGlzLnJlc2F2ZVRva2VuID0gcmVzYXZlVG9rZW47XG5cbiAgICAgICAgdGhpcy5hdXRoSW5zdGFuY2UgPSBheGlvcy5jcmVhdGUoe1xuICAgICAgICAgICAgYmFzZVVSTDogJ2h0dHBzOi8vbG9naW4ucHJvY29yZS5jb20vb2F1dGgvdG9rZW4vJ1xuICAgICAgICAgICAgLy8gYmFzZVVSTDogJ2h0dHBzOi8vbG9naW4tc2FuZGJveC5wcm9jb3JlLmNvbS9vYXV0aC90b2tlbi8nXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYXV0aEluc3RhbmNlLmRlZmF1bHRzLmhlYWRlcnMucG9zdFsnQWNjZXB0J10gPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICAgIHRoaXMuYXV0aEluc3RhbmNlLmRlZmF1bHRzLmhlYWRlcnMucG9zdFsnQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgICAgICAgdGhpcy5hcGlJbnN0YW5jZSA9IGF4aW9zLmNyZWF0ZSh7XG4gICAgICAgICAgICBiYXNlVVJMOiAnaHR0cHM6Ly9hcGkucHJvY29yZS5jb20vcmVzdC92MS4wLydcbiAgICAgICAgICAgIC8vIGJhc2VVUkw6ICdodHRwczovL3NhbmRib3gucHJvY29yZS5jb20vcmVzdC92MS4wLydcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hcGlJbnN0YW5jZS5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnQXV0aG9yaXphdGlvbiddID0gYEJlYXJlciAke2F1dGguYWNjZXNzVG9rZW59YDtcbiAgICAgICAgdGhpcy5hcGlJbnN0YW5jZS5kZWZhdWx0cy5oZWFkZXJzLnBvc3RbJ0FjY2VwdCddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICB0aGlzLmFwaUluc3RhbmNlLmRlZmF1bHRzLmhlYWRlcnMucG9zdFsnQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgfVxuXG4gICAgYXN5bmMgcmVmcmVzaFRva2VuKCk6IFByb21pc2U8cHJvY29yZUNvbnRleHQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy5hdXRoSW5zdGFuY2UucG9zdCgnJywge2dyYW50X3R5cGU6ICdyZWZyZXNoX3Rva2VuJywgcmVmcmVzaF90b2tlbjogdGhpcy5hdXRoLnJlZnJlc2hUb2tlbn0pO1xuXG4gICAgICAgICAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IGRhdGFbJ2FjY2Vzc190b2tlbiddO1xuICAgICAgICAgICAgY29uc3QgcmVmcmVzaFRva2VuID0gZGF0YVsncmVmcmVzaF90b2tlbiddO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBwcm9jb3JlQ29udGV4dChhY2Nlc3NUb2tlbiwgcmVmcmVzaFRva2VuKTtcbiAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICB0aHJvdyB7J21lc3NhZ2UnOidSZWZyZXNoIFRva2VuIEZhaWxlZCd9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0Q29tcGFuaWVzKCkgIDogUHJvbWlzZTxQcm9jb3JlQ29tcGFueU1vZGVsW10+e1xuICAgICAgICBjb25zdCByZXN1bHQ6IFByb2NvcmVDb21wYW55TW9kZWxbXSA9IFtdO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLmFwaUluc3RhbmNlXG4gICAgICAgICAgICAuZ2V0KCcvY29tcGFuaWVzJylcbiAgICAgICAgICAgIGZvciAodmFyIGNvbXBhbnlEYXRhIG9mIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBsZXQgY29tcGFueSA9IE9iamVjdC5hc3NpZ24obmV3IFByb2NvcmVDb21wYW55TW9kZWwoKSwgY29tcGFueURhdGEpO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNvbXBhbnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgIC8vRm9yIHNvbWUgcmVhc29uLCBDYW5ub3QgYWNlc3Mgc3RhdHVzIG9uIGVycm9yIFJlc3BvbnNlXG4gICAgICAgICAgICBjb25zdCBlcnJvclJlc3BvbnNlID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShlKSk7XG4gICAgICAgICAgICBpZiAoZXJyb3JSZXNwb25zZVsnc3RhdHVzJ10gPT0gNDAxKSB7XG5cbiAgICAgICAgICAgICAgICAvL0JyZWFrIENvZGUgLSBUZW1wb3JhcnlcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hdXRoLnJlZnJlc2hUb2tlbiA9PT0gJzEnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IHsnbWVzc2FnZSc6J1JlcXVlc3QgRmFpbGVkIC0gSW52YWxpZCB0b2tlbiBhbmQgcmVmcmVzaCB0b2tlbid9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuYXV0aCA9IGF3YWl0IHRoaXMucmVmcmVzaFRva2VuKCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5yZXNhdmVUb2tlbih0aGlzLmF1dGgpXG5cbiAgICAgICAgICAgICAgICB0aGlzLmFwaUluc3RhbmNlLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydBdXRob3JpemF0aW9uJ10gPSBgQmVhcmVyICR7dGhpcy5hdXRoLmFjY2Vzc1Rva2VufWA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0Q29tcGFuaWVzKClcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgeydtZXNzYWdlJzonUmVxdWVzdCBGYWlsZWQnfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGFzeW5jIGdldFByb2plY3RzKGNvbXBhbnlJZDogbnVtYmVyKSA6IFByb21pc2U8UHJvY29yZVByb2plY3RNb2RlbFtdPiB7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0OiBQcm9jb3JlUHJvamVjdE1vZGVsW10gPSBbXTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy5hcGlJbnN0YW5jZVxuICAgICAgICAgICAgLmdldCgnL3Byb2plY3RzJywgeyBwYXJhbXM6IHsgY29tcGFueV9pZDogY29tcGFueUlkIH0gLCBoZWFkZXJzOiB7ICdQcm9jb3JlLUNvbXBhbnktSWQnOiBgJHtjb21wYW55SWR9YH19KVxuICAgICAgICAgICAgZm9yICh2YXIgcHJvamVjdERhdGEgb2YgZGF0YSkge1xuICAgICAgICAgICAgICAgIGxldCBwcm9qZWN0ID0gT2JqZWN0LmFzc2lnbihuZXcgUHJvY29yZUNvbXBhbnlNb2RlbCgpLCBwcm9qZWN0RGF0YSk7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocHJvamVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgICAgLy9Gb3Igc29tZSByZWFzb24sIENhbm5vdCBhY2VzcyBzdGF0dXMgb24gZXJyb3IgUmVzcG9uc2VcbiAgICAgICAgICAgIGNvbnN0IGVycm9yUmVzcG9uc2UgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGUpKTtcbiAgICAgICAgICAgIGlmIChlcnJvclJlc3BvbnNlWydzdGF0dXMnXSA9PSA0MDEpIHtcblxuICAgICAgICAgICAgICAgIC8vQnJlYWsgQ29kZSAtIFRlbXBvcmFyeVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmF1dGgucmVmcmVzaFRva2VuID09PSAnMScpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgeydtZXNzYWdlJzonUmVxdWVzdCBGYWlsZWQgLSBJbnZhbGlkIHRva2VuIGFuZCByZWZyZXNoIHRva2VuJ307XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5hdXRoID0gYXdhaXQgdGhpcy5yZWZyZXNoVG9rZW4oKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnJlc2F2ZVRva2VuKHRoaXMuYXV0aClcblxuICAgICAgICAgICAgICAgIHRoaXMuYXBpSW5zdGFuY2UuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ0F1dGhvcml6YXRpb24nXSA9IGBCZWFyZXIgJHt0aGlzLmF1dGguYWNjZXNzVG9rZW59YDtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRQcm9qZWN0cyhjb21wYW55SWQpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IHsnbWVzc2FnZSc6J1JlcXVlc3QgRmFpbGVkJ307XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRVc2Vycyhjb21wYW55SWQ6IG51bWJlcikgOiBQcm9taXNlPFByb2NvcmVVc2VyTW9kZWxbXT4ge1xuICAgICAgICBjb25zdCByZXN1bHQ6IFByb2NvcmVVc2VyTW9kZWxbXSA9IFtdO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLmFwaUluc3RhbmNlXG4gICAgICAgICAgICAuZ2V0KCcvdXNlcnMnLCB7IHBhcmFtczogeyBjb21wYW55X2lkOiBjb21wYW55SWQgfSAsIGhlYWRlcnM6IHsgJ1Byb2NvcmUtQ29tcGFueS1JZCc6IGAke2NvbXBhbnlJZH1gfX0pXG4gICAgICAgICAgICBmb3IgKHZhciB1c2VyRGF0YSBvZiBkYXRhKSB7XG4gICAgICAgICAgICAgICAgbGV0IHVzZXIgPSBPYmplY3QuYXNzaWduKG5ldyBQcm9jb3JlVXNlck1vZGVsKCksIHVzZXJEYXRhKTtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh1c2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICAvL0ZvciBzb21lIHJlYXNvbiwgQ2Fubm90IGFjZXNzIHN0YXR1cyBvbiBlcnJvciBSZXNwb25zZVxuICAgICAgICAgICAgY29uc3QgZXJyb3JSZXNwb25zZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZSkpO1xuICAgICAgICAgICAgaWYgKGVycm9yUmVzcG9uc2VbJ3N0YXR1cyddID09IDQwMSkge1xuXG4gICAgICAgICAgICAgICAgLy9CcmVhayBDb2RlIC0gVGVtcG9yYXJ5XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXV0aC5yZWZyZXNoVG9rZW4gPT09ICcxJykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyB7J21lc3NhZ2UnOidSZXF1ZXN0IEZhaWxlZCAtIEludmFsaWQgdG9rZW4gYW5kIHJlZnJlc2ggdG9rZW4nfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmF1dGggPSBhd2FpdCB0aGlzLnJlZnJlc2hUb2tlbigpOztcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnJlc2F2ZVRva2VuKHRoaXMuYXV0aClcblxuICAgICAgICAgICAgICAgIHRoaXMuYXBpSW5zdGFuY2UuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ0F1dGhvcml6YXRpb24nXSA9IGBCZWFyZXIgJHt0aGlzLmF1dGguYWNjZXNzVG9rZW59YDtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRVc2Vycyhjb21wYW55SWQpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IHsnbWVzc2FnZSc6J1JlcXVlc3QgRmFpbGVkJ307XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbn1cbiJdfQ==