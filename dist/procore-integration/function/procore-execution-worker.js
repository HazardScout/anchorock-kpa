"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.executionKPAHandler = exports.executionLambdaHandler = void 0;
const util_1 = require("util");
const job_1 = require("../../base-integration/src/job");
const worker_1 = require("../../base-integration/src/worker");
const mongodb_1 = require("./mongodb");
const job_2 = require("./job");
const exec = async (event, context, kpaOptions) => {
    const logger = (kpaOptions === null || kpaOptions === void 0 ? void 0 : kpaOptions.logger) || console.log;
    (0, util_1.debuglog)('env')('## ENVIRONMENT VARIABLES: ' + serialize(process.env));
    logger('## EVENT: ' + serialize(event));
    logger('## CONTEXT: ' + serialize(context || kpaOptions));
    logger("Execute Procore Execution Start");
    let workerStatus = new worker_1.WorkerStatus('Procore Execution Handler');
    try {
        workerStatus.start();
        const record = event.Records[0];
        const messageAttributes = record.messageAttributes;
        // let kpaToken = `${messageAttributes.get('kpaToken')?.get('stringValue')}`;
        let kpaToken = messageAttributes['kpaToken']['stringValue'];
        const configDB = new mongodb_1.KPAProcoreConfigurationDB();
        let config = await configDB.getConfigurationByKpaToken(kpaToken);
        if (config != null) {
            if (config.isSyncUser) {
                let userJob = new job_2.ProcoreUserJob(config);
                let jobStatus = new job_1.JobStatus(userJob.name);
                workerStatus.jobLog.push(jobStatus);
                try {
                    jobStatus.start();
                    await userJob.execute(jobStatus);
                }
                catch (e) {
                    jobStatus.error = String(e);
                    throw e;
                }
                finally {
                    jobStatus.done();
                }
            }
            if (config.isSyncProject) {
                let projectJob = new job_2.ProcoreProjectJob(config);
                let jobStatus = new job_1.JobStatus(projectJob.name);
                workerStatus.jobLog.push(jobStatus);
                try {
                    jobStatus.start();
                    await projectJob.execute(jobStatus);
                }
                catch (e) {
                    jobStatus.error = String(e);
                    throw e;
                }
                finally {
                    jobStatus.done();
                }
            }
        }
    }
    catch (e) {
        workerStatus.error = String(e);
        logger(`Worker Stop with Error : ${e}`);
    }
    finally {
        workerStatus.done();
    }
    logger("Execute Procore Execution Done");
    const response = {
        "statusCode": 200,
        "source": "Procore Execution Integration",
        "body": workerStatus,
    };
    return response;
};
const executionLambdaHandler = async (event, context) => {
    return exec(event, context);
};
exports.executionLambdaHandler = executionLambdaHandler;
const executionKPAHandler = async (event, kpaOptions) => {
    return exec(event, undefined, kpaOptions);
};
exports.executionKPAHandler = executionKPAHandler;
const serialize = function (object) {
    return JSON.stringify(object, null, 2);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY29yZS1leGVjdXRpb24td29ya2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvY29yZS1pbnRlZ3JhdGlvbi9mdW5jdGlvbi9wcm9jb3JlLWV4ZWN1dGlvbi13b3JrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsK0JBQWdDO0FBQ2hDLHdEQUEyRDtBQUMzRCw4REFBaUU7QUFDakUsdUNBQXNEO0FBQ3RELCtCQUEwRDtBQUUxRCxNQUFNLElBQUksR0FBRyxLQUFLLEVBQUUsS0FBVSxFQUFFLE9BQWlCLEVBQUUsVUFBc0IsRUFBRSxFQUFFO0lBQzNFLE1BQU0sTUFBTSxHQUFHLENBQUEsVUFBVSxhQUFWLFVBQVUsdUJBQVYsVUFBVSxDQUFFLE1BQU0sS0FBSSxPQUFPLENBQUMsR0FBRyxDQUFDO0lBQ2pELElBQUEsZUFBUSxFQUFDLEtBQUssQ0FBQyxDQUFDLDRCQUE0QixHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUN0RSxNQUFNLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBQ3ZDLE1BQU0sQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDLE9BQU8sSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFBO0lBRXpELE1BQU0sQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0lBQzFDLElBQUksWUFBWSxHQUFHLElBQUkscUJBQVksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0lBRWpFLElBQUksQ0FBQztRQUNILFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNwQixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixDQUFDO1FBRW5ELDZFQUE2RTtRQUM3RSxJQUFJLFFBQVEsR0FBRyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxhQUFh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QUFHLFVBQVMsTUFBVztJQUNwQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUN4QyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250ZXh0LCBIYW5kbGVyIH0gZnJvbSBcImF3cy1sYW1iZGFcIjtcbmltcG9ydCB7IGRlYnVnbG9nIH0gZnJvbSAndXRpbCc7XG5pbXBvcnQgeyBKb2JTdGF0dXMgfSBmcm9tIFwiLi4vLi4vYmFzZS1pbnRlZ3JhdGlvbi9zcmMvam9iXCI7XG5pbXBvcnQgeyBXb3JrZXJTdGF0dXMgfSBmcm9tIFwiLi4vLi4vYmFzZS1pbnRlZ3JhdGlvbi9zcmMvd29ya2VyXCI7XG5pbXBvcnQgeyBLUEFQcm9jb3JlQ29uZmlndXJhdGlvbkRCIH0gZnJvbSBcIi4vbW9uZ29kYlwiO1xuaW1wb3J0IHsgUHJvY29yZVByb2plY3RKb2IsIFByb2NvcmVVc2VySm9iIH0gZnJvbSBcIi4vam9iXCI7XG5cbmNvbnN0IGV4ZWMgPSBhc3luYyAoZXZlbnQ6IGFueSwgY29udGV4dD86IENvbnRleHQsIGtwYU9wdGlvbnM/OktQQU9wdGlvbnMpID0+IHtcbiAgY29uc3QgbG9nZ2VyID0ga3BhT3B0aW9ucz8ubG9nZ2VyIHx8IGNvbnNvbGUubG9nO1xuICBkZWJ1Z2xvZygnZW52JykoJyMjIEVOVklST05NRU5UIFZBUklBQkxFUzogJyArIHNlcmlhbGl6ZShwcm9jZXNzLmVudikpXG4gIGxvZ2dlcignIyMgRVZFTlQ6ICcgKyBzZXJpYWxpemUoZXZlbnQpKVxuICBsb2dnZXIoJyMjIENPTlRFWFQ6ICcgKyBzZXJpYWxpemUoY29udGV4dCB8fCBrcGFPcHRpb25zKSlcblxuICBsb2dnZXIoXCJFeGVjdXRlIFByb2NvcmUgRXhlY3V0aW9uIFN0YXJ0XCIpO1xuICBsZXQgd29ya2VyU3RhdHVzID0gbmV3IFdvcmtlclN0YXR1cygnUHJvY29yZSBFeGVjdXRpb24gSGFuZGxlcicpO1xuXG4gIHRyeSB7XG4gICAgd29ya2VyU3RhdHVzLnN0YXJ0KClcbiAgICBjb25zdCByZWNvcmQgPSBldmVudC5SZWNvcmRzWzBdO1xuICAgIGNvbnN0IG1lc3NhZ2VBdHRyaWJ1dGVzID0gcmVjb3JkLm1lc3NhZ2VBdHRyaWJ1dGVzO1xuXG4gICAgLy8gbGV0IGtwYVRva2VuID0gYCR7bWVzc2FnZUF0dHJpYnV0ZXMuZ2V0KCdrcGFUb2tlbicpPy5nZXQoJ3N0cmluZ1ZhbHVlJyl9YDtcbiAgICBsZXQga3BhVG9rZW4gPSBtZXNzYWdlQXR0cmlidXRlc1sna3BhVG9rZW4nXVsnc3RyaW5nVmFsdWUnXTtcblxuICAgIGNvbnN0IGNvbmZpZ0RCID0gbmV3IEtQQVByb2NvcmVDb25maWd1cmF0aW9uREIoKTtcbiAgICBsZXQgY29uZmlnID0gYXdhaXQgY29uZmlnREIuZ2V0Q29uZmlndXJhdGlvbkJ5S3BhVG9rZW4oa3BhVG9rZW4pO1xuXG4gICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICBpZiAoY29uZmlnLmlzU3luY1VzZXIpIHtcbiAgICAgICAgbGV0IHVzZXJKb2IgPSBuZXcgUHJvY29yZVVzZXJKb2IoY29uZmlnKTtcbiAgICAgICAgbGV0IGpvYlN0YXR1cyA9IG5ldyBKb2JTdGF0dXModXNlckpvYi5uYW1lKTtcbiAgICAgICAgd29ya2VyU3RhdHVzLmpvYkxvZy5wdXNoKGpvYlN0YXR1cyk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBqb2JTdGF0dXMuc3RhcnQoKVxuICAgICAgICAgIGF3YWl0IHVzZXJKb2IuZXhlY3V0ZShqb2JTdGF0dXMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBqb2JTdGF0dXMuZXJyb3IgPSBTdHJpbmcoZSlcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBqb2JTdGF0dXMuZG9uZSgpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNvbmZpZy5pc1N5bmNQcm9qZWN0KSB7XG4gICAgICAgIGxldCBwcm9qZWN0Sm9iID0gbmV3IFByb2NvcmVQcm9qZWN0Sm9iKGNvbmZpZyk7XG4gICAgICAgIGxldCBqb2JTdGF0dXMgPSBuZXcgSm9iU3RhdHVzKHByb2plY3RKb2IubmFtZSk7XG4gICAgICAgIHdvcmtlclN0YXR1cy5qb2JMb2cucHVzaChqb2JTdGF0dXMpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgam9iU3RhdHVzLnN0YXJ0KClcbiAgICAgICAgICBhd2FpdCBwcm9qZWN0Sm9iLmV4ZWN1dGUoam9iU3RhdHVzKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgam9iU3RhdHVzLmVycm9yID0gU3RyaW5nKGUpXG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgam9iU3RhdHVzLmRvbmUoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG5cbiAgfSBjYXRjaChlKSB7XG4gICAgd29ya2VyU3RhdHVzLmVycm9yID0gU3RyaW5nKGUpO1xuICAgIGxvZ2dlcihgV29ya2VyIFN0b3Agd2l0aCBFcnJvciA6ICR7ZX1gKVxuICB9IGZpbmFsbHkge1xuICAgIHdvcmtlclN0YXR1cy5kb25lKClcbiAgfVxuXG4gIGxvZ2dlcihcIkV4ZWN1dGUgUHJvY29yZSBFeGVjdXRpb24gRG9uZVwiKTtcblxuICBjb25zdCByZXNwb25zZSA9IHtcbiAgICBcInN0YXR1c0NvZGVcIjogMjAwLFxuICAgIFwic291cmNlXCI6IFwiUHJvY29yZSBFeGVjdXRpb24gSW50ZWdyYXRpb25cIixcbiAgICBcImJvZHlcIjogd29ya2VyU3RhdHVzLFxuICB9XG5cbiAgcmV0dXJuIHJlc3BvbnNlXG59XG5cbmV4cG9ydCBjb25zdCBleGVjdXRpb25MYW1iZGFIYW5kbGVyIDogSGFuZGxlciA9IGFzeW5jIChldmVudDogYW55LCBjb250ZXh0OiBDb250ZXh0KSA9PiB7XG4gIHJldHVybiBleGVjKGV2ZW50LCBjb250ZXh0KTtcbn1cblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGlvbktQQUhhbmRsZXIgOiBLUEFIYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBhbnksIGtwYU9wdGlvbnM6IEtQQU9wdGlvbnMpID0+IHtcbiAgcmV0dXJuIGV4ZWMoZXZlbnQsIHVuZGVmaW5lZCwga3BhT3B0aW9ucyk7XG59XG5cbmNvbnN0IHNlcmlhbGl6ZSA9IGZ1bmN0aW9uKG9iamVjdDogYW55KSB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmplY3QsIG51bGwsIDIpXG59XG5cbmV4cG9ydCB0eXBlIEtQQU9wdGlvbnMgPSB7XG4gIGxvZ2dlcj86ICguLi5kYXRhOmFueVtdKSA9PiB2b2lkLFxufVxuXG5leHBvcnQgdHlwZSBLUEFIYW5kbGVyID0gKGV2ZW50OiBhbnksIGtwYU9wdGlvbnM6S1BBT3B0aW9ucykgPT4gYW55O1xuIl19