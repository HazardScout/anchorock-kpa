"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RivetAPI = void 0;
const axios_1 = require("axios");
const model_1 = require("../model");
class RivetAPI {
    constructor(clientId, token) {
        this.apiInstance = axios_1.default.create({
            baseURL: 'https://api.rivet.work'
        });
        this.apiInstance.defaults.headers.common['clientid'] = clientId;
        this.apiInstance.defaults.headers.common['token'] = token;
        this.apiInstance.defaults.headers.common['Accept'] = 'application/json';
        this.apiInstance.defaults.headers.common['Content-Type'] = 'application/json';
    }
    async getProjects() {
        const result = [];
        const { data } = await this.apiInstance.get('/api/v1/jobs');
        for (var project of data) {
            result.push(new model_1.RivetProjectModel(project));
        }
        return result;
    }
    async getUsers() {
        const result = [];
        const { data } = await this.apiInstance.get('/api/v1/workers');
        for (var user of data) {
            result.push(new model_1.RivetUserModel(user));
        }
        return result;
    }
}
exports.RivetAPI = RivetAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicml2ZXQtYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcml2ZXQtaW50ZWdyYXRpb24vZnVuY3Rpb24vYXBpL3JpdmV0LWFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpQ0FBcUM7QUFDckMsb0NBQTZEO0FBRTdELE1BQWEsUUFBUTtJQUdqQixZQUFZLFFBQWdCLEVBQUUsS0FBYTtRQUN2QyxJQUFJLENBQUMsV0FBVyxHQUFHLGVBQUssQ0FBQyxNQUFNLENBQUM7WUFDNUIsT0FBTyxFQUFFLHdCQUF3QjtTQUNwQyxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLFFBQVEsQ0FBQTtRQUMvRCxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQTtRQUN6RCxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLGtCQUFrQixDQUFDO1FBQ3hFLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsa0JBQWtCLENBQUM7SUFDbEYsQ0FBQztJQUVELEtBQUssQ0FBQyxXQUFXO1FBQ2IsTUFBTSxNQUFNLEdBQXdCLEVBQUUsQ0FBQztRQUN2QyxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQTtRQUMzRCxLQUFJLElBQUksT0FBTyxJQUFJLElBQUksRUFBRSxDQUFDO1lBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSx5QkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO1FBQy9DLENBQUM7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQsS0FBSyxDQUFDLFFBQVE7UUFDVixNQUFNLE1BQU0sR0FBcUIsRUFBRSxDQUFDO1FBQ3BDLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUE7UUFDOUQsS0FBSSxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksc0JBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBQ3pDLENBQUM7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0NBSUo7QUFwQ0QsNEJBb0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zLCB7IEF4aW9zIH0gZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQgeyBSaXZldFByb2plY3RNb2RlbCwgUml2ZXRVc2VyTW9kZWwgfSBmcm9tIFwiLi4vbW9kZWxcIjtcblxuZXhwb3J0IGNsYXNzIFJpdmV0QVBJIHtcbiAgICBwcml2YXRlIGFwaUluc3RhbmNlOiBBeGlvcztcblxuICAgIGNvbnN0cnVjdG9yKGNsaWVudElkOiBzdHJpbmcsIHRva2VuOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5hcGlJbnN0YW5jZSA9IGF4aW9zLmNyZWF0ZSh7XG4gICAgICAgICAgICBiYXNlVVJMOiAnaHR0cHM6Ly9hcGkucml2ZXQud29yaydcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLmFwaUluc3RhbmNlLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydjbGllbnRpZCddID0gY2xpZW50SWRcbiAgICAgICAgdGhpcy5hcGlJbnN0YW5jZS5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsndG9rZW4nXSA9IHRva2VuXG4gICAgICAgIHRoaXMuYXBpSW5zdGFuY2UuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ0FjY2VwdCddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICB0aGlzLmFwaUluc3RhbmNlLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICB9XG5cbiAgICBhc3luYyBnZXRQcm9qZWN0cygpIDogUHJvbWlzZTxSaXZldFByb2plY3RNb2RlbFtdPiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdDogUml2ZXRQcm9qZWN0TW9kZWxbXSA9IFtdO1xuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuYXBpSW5zdGFuY2UuZ2V0KCcvYXBpL3YxL2pvYnMnKVxuICAgICAgICBmb3IodmFyIHByb2plY3Qgb2YgZGF0YSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3IFJpdmV0UHJvamVjdE1vZGVsKHByb2plY3QpKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRVc2VycygpIDogUHJvbWlzZTxSaXZldFVzZXJNb2RlbFtdPiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdDogUml2ZXRVc2VyTW9kZWxbXSA9IFtdO1xuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuYXBpSW5zdGFuY2UuZ2V0KCcvYXBpL3YxL3dvcmtlcnMnKVxuICAgICAgICBmb3IodmFyIHVzZXIgb2YgZGF0YSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3IFJpdmV0VXNlck1vZGVsKHVzZXIpKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cblxuXG59Il19