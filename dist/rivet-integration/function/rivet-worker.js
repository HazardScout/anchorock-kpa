"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rivetWorkerLambdaHandler = void 0;
const mongodb_1 = require("./mongodb");
const aws_sdk_1 = require("aws-sdk");
// Handler
const rivetWorkerLambdaHandler = async (event, context) => {
    var _a, _b;
    console.log('## ENVIRONMENT VARIABLES: ' + serialize(process.env));
    console.log('## EVENT: ' + serialize(event));
    //Fetch Configuration
    const configDB = new mongodb_1.KPARivetConfigurationDB();
    let configs = await configDB.getConfiguration();
    const sqsInstance = new aws_sdk_1.SQS({
        accessKeyId: process.env.AWS_ACCESS_KEY,
        secretAccessKey: process.env.AWS_SECRET_KEY,
        region: process.env.AWS_REGION
    });
    for (var config of configs) {
        if (!config.active) {
            continue;
        }
        console.log(`Execute Rivet Customer: ${config.kpaSite} Start`);
        if (config.isSyncUser) {
            const sqsUserPayload = {
                DelaySeconds: 0,
                MessageBody: `User Integration - ${config.kpaSite}`,
                QueueUrl: (_a = process.env.AWS_SQS_RIVET_USER_URL) !== null && _a !== void 0 ? _a : '',
                MessageAttributes: {
                    'clientId': {
                        StringValue: config.clientId,
                        DataType: 'String'
                    },
                    'token': {
                        StringValue: config.token,
                        DataType: 'String'
                    },
                    'isEditUser': {
                        StringValue: config.isEditUser ? '1' : '0',
                        DataType: 'String'
                    },
                    'kpaSite': {
                        StringValue: config.kpaSite,
                        DataType: 'String'
                    },
                    'kpaToken': {
                        StringValue: config.kpaToken,
                        DataType: 'String'
                    },
                    'defaultRole': {
                        StringValue: config.defaultRole,
                        DataType: 'String'
                    },
                    'welcomeEmail': {
                        StringValue: config.isWelcomeEmail ? '1' : '0',
                        DataType: 'String'
                    },
                    'resetPassword': {
                        StringValue: config.isForceResetPassword ? '1' : '0',
                        DataType: 'String'
                    }
                },
            };
            const userPromise = await new Promise((resolve, reject) => {
                sqsInstance.sendMessage(sqsUserPayload, (err, data) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(data);
                    }
                });
            });
            console.log(userPromise);
        }
        if (config.isSyncProject) {
            const sqsProjectPayload = {
                DelaySeconds: 0,
                MessageBody: `Project Integration - ${config.kpaSite}`,
                QueueUrl: (_b = process.env.AWS_SQS_RIVET_PROJECT_URL) !== null && _b !== void 0 ? _b : '',
                MessageAttributes: {
                    'clientId': {
                        StringValue: config.clientId,
                        DataType: 'String'
                    },
                    'token': {
                        StringValue: config.token,
                        DataType: 'String'
                    },
                    'isEditProject': {
                        StringValue: config.isEditProject ? '1' : '0',
                        DataType: 'String'
                    },
                    'kpaSite': {
                        StringValue: config.kpaSite,
                        DataType: 'String'
                    },
                    'kpaToken': {
                        StringValue: config.kpaToken,
                        DataType: 'String'
                    }
                },
            };
            const projectPromise = await new Promise((resolve, reject) => {
                sqsInstance.sendMessage(sqsProjectPayload, (err, data) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(data);
                    }
                });
            });
            console.log(projectPromise);
        }
        console.log(`Execute Rivet Customer Done`);
    }
    const response = {
        "statusCode": 200,
        "source": "Rivet Worker Integration",
        "body": {},
    };
    console.log(`Execute Rivet Done`);
    return response;
};
exports.rivetWorkerLambdaHandler = rivetWorkerLambdaHandler;
var serialize = function (object) {
    return JSON.stringify(object, null, 2);
};
//# sourceMappingURL=data:application/json;base64,