"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RivetProjectJob = void 0;
const api_1 = require("../../../base-integration/src/api");
const api_2 = require("../api");
const model_1 = require("../../../base-integration/src/model");
const util_1 = require("util");
class RivetProjectJob {
    constructor(config) {
        this.name = 'Rivet Project Job';
        this.config = config;
        this.kpaSite = config["kpaSite"]["stringValue"];
        this.kpaToken = config["kpaToken"]["stringValue"];
        this.clientId = config["clientId"]["stringValue"];
        this.token = config["token"]["stringValue"];
        this.isEditProject = config["isEditProject"]["stringValue"] == '1';
    }
    async execute(status) {
        (0, util_1.debuglog)('log:rivet:project')("Execute RivetProjectJob Start");
        let kpaProjectAPI = new api_1.KPAProjectAPI(this.kpaToken);
        // let kpaExistProjects = await kpaProjectAPI.getAllProject();
        let kpaExistProjects = [];
        status.totalExistingRecord = kpaExistProjects.length;
        (0, util_1.debuglog)('log:rivet:project')(JSON.stringify(kpaExistProjects, null, 2));
        let rivetAPI = new api_2.RivetAPI(this.clientId, this.token);
        let projects = await rivetAPI.getProjects();
        status.totalSourceRecord = projects.length;
        let kpaProjects = [];
        for (let project of projects) {
            if (project.jobName.startsWith('*') === true) {
                status.skippedRecord++;
                continue;
            }
            var kpaProject = null;
            for (let i = 0; i < kpaExistProjects.length; i++) {
                const kpaExistProject = kpaExistProjects[i];
                if (kpaExistProject.name === project.jobName && kpaExistProject.code === project.jobNumber) {
                    kpaProject = kpaExistProject;
                    kpaExistProjects.splice(i, 1);
                    break;
                }
            }
            if (kpaProject == null) {
                kpaProject = new model_1.KPAProjectModel();
            }
            else {
                if (!this.isEditProject) {
                    status.skippedRecord++;
                    continue;
                }
            }
            if (project.jobName.includes("\"")) {
                project.jobName = project.jobName.replace("\"", "'");
            }
            //Build KPA project Data and Check existing
            kpaProject.name = project.jobName;
            kpaProject.code = project.jobNumber;
            kpaProject.isActive = project.jobStatus === 'In-Progress';
            kpaProject.address = project.address;
            kpaProject.city = project.city;
            kpaProject.state = project.state;
            kpaProject.zip = project.zip;
            kpaProjects.push(kpaProject);
            status.upsertRecord++;
        }
        //Send Data
        (0, util_1.debuglog)('log:rivet:project')(String(kpaProjects.length));
        const success = await kpaProjectAPI.saveProject(this.kpaSite, kpaProjects);
        if (!success) {
            throw new Error('Failed to save Projects:' + this.config.kpaSite);
        }
        (0, util_1.debuglog)('log:rivet:project')("Execute RivetProjectJob Done");
    }
}
exports.RivetProjectJob = RivetProjectJob;
//# sourceMappingURL=data:application/json;base64,