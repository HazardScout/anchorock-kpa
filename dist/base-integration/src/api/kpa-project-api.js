"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KPAProjectAPI = void 0;
const axios_1 = require("axios");
const model_1 = require("../model");
const utilities_1 = require("../utilities");
class KPAProjectAPI {
    constructor(token) {
        this.token = token;
        this.apiInstance = axios_1.default.create({ baseURL: 'https://api.kpaehs.com/v1' });
    }
    async getAllProject() {
        let result = [];
        const { data } = await this.apiInstance.post('projects.list', { token: this.token });
        console.log(data);
        for (var projectData of data) {
            let project = Object.assign(new model_1.KPAProjectModel(), projectData);
            result.push(project);
        }
        return result;
    }
    async saveProject(site, models) {
        let headers = 'Site,RecordType,Name,Number,IsActive,Address,City,State,ZIP';
        var content = `${headers}`;
        var addedProjectNumber = [];
        for (var model of models) {
            if (addedProjectNumber.indexOf(model.code) > 0) {
                continue;
            }
            addedProjectNumber.push(model.code);
            content = `${content}\n${site},Project`;
            content = `${content},${utilities_1.Helper.csvContentChecker(model.name)}`;
            content = `${content},${utilities_1.Helper.csvContentChecker(model.code)}`;
            content = `${content},${model.isActive ? 'Y' : 'N'}`;
            content = `${content},${utilities_1.Helper.csvContentChecker(model.address)}`;
            content = `${content},${utilities_1.Helper.csvContentChecker(model.city)}`;
            content = `${content},${utilities_1.Helper.csvContentChecker(model.state)}`;
            content = `${content},${utilities_1.Helper.csvContentChecker(model.zip)}`;
        }
        // console.log(content)
        // return true;
        const fileData = Buffer.from(content, 'binary').toString('base64');
        console.log(content);
        const { data } = await this.apiInstance.post('dataload.create', {
            token: this.token,
            file: `data:text/csv;base64,${fileData}`,
            failureEmails: [],
            successEmails: []
        });
        console.log(data);
        return data.ok;
    }
}
exports.KPAProjectAPI = KPAProjectAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia3BhLXByb2plY3QtYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vYmFzZS1pbnRlZ3JhdGlvbi9zcmMvYXBpL2twYS1wcm9qZWN0LWFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpQ0FBcUM7QUFDckMsb0NBQTJDO0FBQzNDLDRDQUFzQztBQUV0QyxNQUFhLGFBQWE7SUFJdEIsWUFBWSxLQUFhO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxXQUFXLEdBQUcsZUFBSyxDQUFDLE1BQU0sQ0FBQyxFQUFDLE9BQU8sRUFBRSwyQkFBMkIsRUFBQyxDQUFDLENBQUE7SUFDM0UsQ0FBQztJQUVELEtBQUssQ0FBQyxhQUFhO1FBQ2YsSUFBSSxNQUFNLEdBQXVCLEVBQUUsQ0FBQztRQUNwQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBQyxLQUFLLEVBQUMsSUFBSSxDQUFDLEtBQUssRUFBQyxDQUFDLENBQUM7UUFDbEYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNqQixLQUFLLElBQUksV0FBVyxJQUFJLElBQUksRUFBRSxDQUFDO1lBQzNCLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSx1QkFBZSxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDaEUsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QixDQUFDO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVELEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBWSxFQUFFLE1BQXlCO1FBRXJELElBQUksT0FBTyxHQUFHLDZEQUE2RCxDQUFDO1FBQzVFLElBQUksT0FBTyxHQUFHLEdBQUcsT0FBTyxFQUFFLENBQUM7UUFDM0IsSUFBSSxrQkFBa0IsR0FBYyxFQUFFLENBQUM7UUFDdkMsS0FBSSxJQUFJLEtBQUssSUFBSSxNQUFNLEVBQUUsQ0FBQztZQUV0QixJQUFJLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7Z0JBQzdDLFNBQVM7WUFDYixDQUFDO1lBRUQsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVwQyxPQUFPLEdBQUcsR0FBRyxPQUFPLEtBQUssSUFBSSxVQUFVLENBQUE7WUFDdkMsT0FBTyxHQUFHLEdBQUcsT0FBTyxJQUFJLGtCQUFNLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUE7WUFDOUQsT0FBTyxHQUFHLEdBQUcsT0FBTyxJQUFJLGtCQUFNLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUE7WUFDOUQsT0FBTyxHQUFHLEdBQUcsT0FBTyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQSxDQUFDLENBQUEsR0FBRyxFQUFFLENBQUE7WUFDbEQsT0FBTyxHQUFHLEdBQUcsT0FBTyxJQUFJLGtCQUFNLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUE7WUFDakUsT0FBTyxHQUFHLEdBQUcsT0FBTyxJQUFJLGtCQUFNLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUE7WUFDOUQsT0FBTyxHQUFHLEdBQUcsT0FBTyxJQUFJLGtCQUFNLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUE7WUFDL0QsT0FBTyxHQUFHLEdBQUcsT0FBTyxJQUFJLGtCQUFNLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUE7UUFFakUsQ0FBQztRQUVELHVCQUF1QjtRQUV2QixlQUFlO1FBRWYsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRW5FLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUE7UUFFcEIsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDNUQsS0FBSyxFQUFDLElBQUksQ0FBQyxLQUFLO1lBQ2hCLElBQUksRUFBRSx3QkFBd0IsUUFBUSxFQUFFO1lBQ3hDLGFBQWEsRUFBRSxFQUFFO1lBQ2pCLGFBQWEsRUFBRSxFQUFFO1NBQ3BCLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFakIsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ25CLENBQUM7Q0FFSjtBQWhFRCxzQ0FnRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MsIHsgQXhpb3MgfSBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCB7IEtQQVByb2plY3RNb2RlbCB9IGZyb20gXCIuLi9tb2RlbFwiO1xuaW1wb3J0IHsgSGVscGVyIH0gZnJvbSBcIi4uL3V0aWxpdGllc1wiO1xuXG5leHBvcnQgY2xhc3MgS1BBUHJvamVjdEFQSSB7XG4gICAgdG9rZW46IHN0cmluZztcbiAgICBhcGlJbnN0YW5jZTogQXhpb3M7XG5cbiAgICBjb25zdHJ1Y3Rvcih0b2tlbjogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgICAgICAgdGhpcy5hcGlJbnN0YW5jZSA9IGF4aW9zLmNyZWF0ZSh7YmFzZVVSTDogJ2h0dHBzOi8vYXBpLmtwYWVocy5jb20vdjEnfSlcbiAgICB9XG5cbiAgICBhc3luYyBnZXRBbGxQcm9qZWN0KCk6UHJvbWlzZTxLUEFQcm9qZWN0TW9kZWxbXT4ge1xuICAgICAgICBsZXQgcmVzdWx0IDogS1BBUHJvamVjdE1vZGVsW10gPSBbXTtcbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLmFwaUluc3RhbmNlLnBvc3QoJ3Byb2plY3RzLmxpc3QnLCB7dG9rZW46dGhpcy50b2tlbn0pO1xuICAgICAgICBjb25zb2xlLmxvZyhkYXRhKVxuICAgICAgICBmb3IgKHZhciBwcm9qZWN0RGF0YSBvZiBkYXRhKSB7XG4gICAgICAgICAgICBsZXQgcHJvamVjdCA9IE9iamVjdC5hc3NpZ24obmV3IEtQQVByb2plY3RNb2RlbCgpLCBwcm9qZWN0RGF0YSk7XG4gICAgICAgICAgICByZXN1bHQucHVzaChwcm9qZWN0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGFzeW5jIHNhdmVQcm9qZWN0KHNpdGU6IHN0cmluZywgbW9kZWxzOiBLUEFQcm9qZWN0TW9kZWxbXSkgOiBQcm9taXNlPGJvb2xlYW4+IHtcblxuICAgICAgICBsZXQgaGVhZGVycyA9ICdTaXRlLFJlY29yZFR5cGUsTmFtZSxOdW1iZXIsSXNBY3RpdmUsQWRkcmVzcyxDaXR5LFN0YXRlLFpJUCc7XG4gICAgICAgIHZhciBjb250ZW50ID0gYCR7aGVhZGVyc31gO1xuICAgICAgICB2YXIgYWRkZWRQcm9qZWN0TnVtYmVyIDogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgZm9yKHZhciBtb2RlbCBvZiBtb2RlbHMpIHtcblxuICAgICAgICAgICAgaWYgKGFkZGVkUHJvamVjdE51bWJlci5pbmRleE9mKG1vZGVsLmNvZGUpID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhZGRlZFByb2plY3ROdW1iZXIucHVzaChtb2RlbC5jb2RlKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGAke2NvbnRlbnR9XFxuJHtzaXRlfSxQcm9qZWN0YFxuICAgICAgICAgICAgY29udGVudCA9IGAke2NvbnRlbnR9LCR7SGVscGVyLmNzdkNvbnRlbnRDaGVja2VyKG1vZGVsLm5hbWUpfWBcbiAgICAgICAgICAgIGNvbnRlbnQgPSBgJHtjb250ZW50fSwke0hlbHBlci5jc3ZDb250ZW50Q2hlY2tlcihtb2RlbC5jb2RlKX1gXG4gICAgICAgICAgICBjb250ZW50ID0gYCR7Y29udGVudH0sJHttb2RlbC5pc0FjdGl2ZSA/ICdZJzonTid9YFxuICAgICAgICAgICAgY29udGVudCA9IGAke2NvbnRlbnR9LCR7SGVscGVyLmNzdkNvbnRlbnRDaGVja2VyKG1vZGVsLmFkZHJlc3MpfWBcbiAgICAgICAgICAgIGNvbnRlbnQgPSBgJHtjb250ZW50fSwke0hlbHBlci5jc3ZDb250ZW50Q2hlY2tlcihtb2RlbC5jaXR5KX1gXG4gICAgICAgICAgICBjb250ZW50ID0gYCR7Y29udGVudH0sJHtIZWxwZXIuY3N2Q29udGVudENoZWNrZXIobW9kZWwuc3RhdGUpfWBcbiAgICAgICAgICAgIGNvbnRlbnQgPSBgJHtjb250ZW50fSwke0hlbHBlci5jc3ZDb250ZW50Q2hlY2tlcihtb2RlbC56aXApfWBcbiAgICAgICAgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coY29udGVudClcblxuICAgICAgICAvLyByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBjb25zdCBmaWxlRGF0YSA9IEJ1ZmZlci5mcm9tKGNvbnRlbnQsICdiaW5hcnknKS50b1N0cmluZygnYmFzZTY0Jyk7XG5cbiAgICAgICAgY29uc29sZS5sb2coY29udGVudClcblxuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuYXBpSW5zdGFuY2UucG9zdCgnZGF0YWxvYWQuY3JlYXRlJywge1xuICAgICAgICAgICAgdG9rZW46dGhpcy50b2tlbixcbiAgICAgICAgICAgIGZpbGU6IGBkYXRhOnRleHQvY3N2O2Jhc2U2NCwke2ZpbGVEYXRhfWAsXG4gICAgICAgICAgICBmYWlsdXJlRW1haWxzOiBbXSxcbiAgICAgICAgICAgIHN1Y2Nlc3NFbWFpbHM6IFtdXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGEpXG5cbiAgICAgICAgcmV0dXJuIGRhdGEub2s7XG4gICAgfVxuXG59Il19