"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _KPAUserAPI_instances, _KPAUserAPI_sendDataToKPA;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KPAUserAPI = void 0;
const axios_1 = require("axios");
const model_1 = require("../model");
const utilities_1 = require("../utilities");
const util_1 = require("util");
class KPAUserAPI {
    constructor(token) {
        _KPAUserAPI_instances.add(this);
        this.token = token;
        this.apiInstance = axios_1.default.create({ baseURL: `https://api.${process.env.SITE_DOMAIN}/v1` });
    }
    async getAllUser() {
        let result = [];
        const { data } = await this.apiInstance.post('users.list', { token: this.token });
        for (var userData of data.users) {
            let user = Object.assign(new model_1.KPAUserModel(), userData);
            result.push(user);
        }
        return result;
    }
    async saveUser(site, models, isEditUSer) {
        var cleanRecords = [];
        var invalidRecords = [];
        for (var model of models) {
            //Ignore user without employee number
            if (model.employeeNumber === null || model.employeeNumber === '') {
                invalidRecords.push(model);
                continue;
            }
            var isDuplicate = false;
            for (let i = 0; i < cleanRecords.length; i++) {
                var clearRecord = cleanRecords[i];
                if (clearRecord.username === model.username || clearRecord.employeeNumber === model.employeeNumber || (clearRecord.email !== '' && clearRecord.email === model.email)) {
                    isDuplicate = true;
                    invalidRecords.push(model);
                    invalidRecords.push(clearRecord);
                    cleanRecords.splice(i, 1);
                    break;
                }
            }
            if (!isDuplicate) {
                for (var invalidRecord of invalidRecords) {
                    if (invalidRecord.username === model.username || invalidRecord.employeeNumber === model.employeeNumber || invalidRecord.email === model.email) {
                        isDuplicate = true;
                        invalidRecords.push(model);
                        break;
                    }
                }
            }
            if (!isDuplicate) {
                cleanRecords.push(model);
            }
        }
        if (cleanRecords.length > 0) {
            await __classPrivateFieldGet(this, _KPAUserAPI_instances, "m", _KPAUserAPI_sendDataToKPA).call(this, site, cleanRecords, isEditUSer);
        }
        if (invalidRecords.length > 0) {
            await __classPrivateFieldGet(this, _KPAUserAPI_instances, "m", _KPAUserAPI_sendDataToKPA).call(this, site, invalidRecords, isEditUSer);
        }
        return true;
    }
}
exports.KPAUserAPI = KPAUserAPI;
_KPAUserAPI_instances = new WeakSet(), _KPAUserAPI_sendDataToKPA = async function _KPAUserAPI_sendDataToKPA(site, models, isEditUSer) {
    var _a;
    let headers = '';
    if (isEditUSer) {
        headers = 'Site,RecordType,Name,EmployeeNumber,FirstName,LastName,Username,InitialPassword,Role,Title,Email,TerminationDate,ForcePasswordSelection,SendWelcomeEmail,UpdatePolicy';
    }
    else {
        headers = 'Site,RecordType,Name,EmployeeNumber,FirstName,LastName,Username,InitialPassword,Role,Title,Email,TerminationDate,ForcePasswordSelection,SendWelcomeEmail';
    }
    var jobTitles = [];
    for (var model of models) {
        if (model.title != null && model.title !== '' && jobTitles.indexOf(model.title.trim()) == -1) {
            jobTitles.push(model.title.trim());
        }
    }
    var content = `${headers}`;
    for (var jobTitle of jobTitles) {
        var dataUser = `${site},JobTitle`;
        dataUser = `${dataUser},${utilities_1.Helper.csvContentChecker(jobTitle)}`;
        content = `${content}\n${dataUser}`;
    }
    for (var model of models) {
        var dataUser = `${site},Employee,`;
        dataUser = `${dataUser},${utilities_1.Helper.csvContentChecker(model.employeeNumber)}`;
        dataUser = `${dataUser},${utilities_1.Helper.csvContentChecker(model.firstName)}`;
        dataUser = `${dataUser},${utilities_1.Helper.csvContentChecker(model.lastName)}`;
        dataUser = `${dataUser},${utilities_1.Helper.csvContentChecker(model.username)}`;
        dataUser = `${dataUser},${utilities_1.Helper.csvContentChecker(model.initialPassword)}`;
        dataUser = `${dataUser},${utilities_1.Helper.csvContentChecker(model.role)}`;
        dataUser = `${dataUser},${utilities_1.Helper.csvContentChecker(model.title)}`;
        dataUser = `${dataUser},${utilities_1.Helper.csvContentChecker(model.email)}`;
        dataUser = `${dataUser},${utilities_1.Helper.csvContentChecker((_a = model.terminationDate) !== null && _a !== void 0 ? _a : '')}`;
        dataUser = `${dataUser},${model.resetPassword ? 'Y' : 'N'}`;
        dataUser = `${dataUser},${model.welcomeEmail ? 'Y' : 'N'}`;
        if (isEditUSer) {
            dataUser = `${dataUser},Always`;
        }
        content = `${content}\n${dataUser}`;
    }
    const fileData = Buffer.from(content, 'binary').toString('base64');
    const { data } = await this.apiInstance.post('dataload.create', {
        token: this.token,
        file: `data:text/csv;base64,${fileData}`,
        name: 'employees.csv',
        failureEmails: [],
        successEmails: []
    });
    (0, util_1.debuglog)('log:worker:dataload-response')('employees', data);
    if (!data.ok) {
        throw new Error(`${data.error}:${data.description}`);
    }
    return data.ok;
};
//# sourceMappingURL=data:application/json;base64,