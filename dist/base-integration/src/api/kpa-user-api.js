"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KPAUserAPI = void 0;
const axios_1 = require("axios");
const model_1 = require("../model");
const utilities_1 = require("../utilities");
class KPAUserAPI {
    constructor(token) {
        this.token = token;
        this.apiInstance = axios_1.default.create({ baseURL: 'https://api.kpaehs.com/v1' });
    }
    async getAllUser() {
        let result = [];
        const { data } = await this.apiInstance.post('users.list', { token: this.token });
        for (var userData of data.users) {
            let user = Object.assign(new model_1.KPAUserModel(), userData);
            result.push(user);
        }
        return result;
    }
    async saveUser(site, models) {
        var _a;
        let headers = 'Site,RecordType,EmployeeNumber,FirstName,LastName,Username,InitialPassword,Role,Title,Email,TerminationDate,ForcePasswordSelection,SendWelcomeEmail';
        var content = `${headers}`;
        var addedUsername = [];
        var addedEmail = [];
        for (var model of models) {
            if (addedUsername.indexOf(model.username) > 0) {
                continue;
            }
            if (addedEmail.indexOf(model.email) > 0) {
                continue;
            }
            addedUsername.push(model.username);
            addedEmail.push(model.email);
            var dataUser = `${site},Employee`;
            dataUser = `${dataUser},${utilities_1.Helper.csvContentChecker(model.employeeNumber)}`;
            dataUser = `${dataUser},${utilities_1.Helper.csvContentChecker(model.firstName)}`;
            dataUser = `${dataUser},${utilities_1.Helper.csvContentChecker(model.lastName)}`;
            dataUser = `${dataUser},${utilities_1.Helper.csvContentChecker(model.username)}`;
            dataUser = `${dataUser},${utilities_1.Helper.csvContentChecker(model.initialPassword)}`;
            dataUser = `${dataUser},${utilities_1.Helper.csvContentChecker(model.role)}`;
            dataUser = `${dataUser},${utilities_1.Helper.csvContentChecker(model.title)}`;
            dataUser = `${dataUser},${utilities_1.Helper.csvContentChecker(model.email)}`;
            dataUser = `${dataUser},${utilities_1.Helper.csvContentChecker((_a = model.terminationDate) !== null && _a !== void 0 ? _a : '')}`;
            dataUser = `${dataUser},${model.resetPassword ? 'Y' : 'N'}`;
            dataUser = `${dataUser},${model.welcomeEmail ? 'Y' : 'N'}`;
            content = `${content}\n${dataUser}`;
        }
        // console.log(content)
        // return true;
        const fileData = Buffer.from(content, 'binary').toString('base64');
        console.log(content);
        const { data } = await this.apiInstance.post('dataload.create', {
            token: this.token,
            file: `data:text/csv;base64,${fileData}`,
            failureEmails: [],
            successEmails: []
        });
        console.log(data);
        return data.ok;
    }
}
exports.KPAUserAPI = KPAUserAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia3BhLXVzZXItYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vYmFzZS1pbnRlZ3JhdGlvbi9zcmMvYXBpL2twYS11c2VyLWFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpQ0FBcUM7QUFDckMsb0NBQXdDO0FBQ3hDLDRDQUFzQztBQUV0QyxNQUFhLFVBQVU7SUFJbkIsWUFBWSxLQUFhO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxXQUFXLEdBQUcsZUFBSyxDQUFDLE1BQU0sQ0FBQyxFQUFDLE9BQU8sRUFBRSwyQkFBMkIsRUFBQyxDQUFDLENBQUE7SUFDM0UsQ0FBQztJQUVELEtBQUssQ0FBQyxVQUFVO1FBQ1osSUFBSSxNQUFNLEdBQW9CLEVBQUUsQ0FBQztRQUNqQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsRUFBQyxLQUFLLEVBQUMsSUFBSSxDQUFDLEtBQUssRUFBQyxDQUFDLENBQUM7UUFDL0UsS0FBSyxJQUFJLFFBQVEsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDOUIsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLG9CQUFZLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUN2RCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RCLENBQUM7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFZLEVBQUUsTUFBc0I7O1FBQy9DLElBQUksT0FBTyxHQUFHLHFKQUFxSixDQUFDO1FBQ3BLLElBQUksT0FBTyxHQUFHLEdBQUcsT0FBTyxFQUFFLENBQUM7UUFDM0IsSUFBSSxhQUFhLEdBQWMsRUFBRSxDQUFDO1FBQ2xDLElBQUksVUFBVSxHQUFjLEVB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TyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ25CLENBQUM7Q0FFSjtBQXhFRCxnQ0F3RUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MsIHsgQXhpb3MgfSBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCB7IEtQQVVzZXJNb2RlbCB9IGZyb20gXCIuLi9tb2RlbFwiO1xuaW1wb3J0IHsgSGVscGVyIH0gZnJvbSBcIi4uL3V0aWxpdGllc1wiO1xuXG5leHBvcnQgY2xhc3MgS1BBVXNlckFQSSB7XG4gICAgdG9rZW46IHN0cmluZztcbiAgICBhcGlJbnN0YW5jZTogQXhpb3M7XG5cbiAgICBjb25zdHJ1Y3Rvcih0b2tlbjogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgICAgICAgdGhpcy5hcGlJbnN0YW5jZSA9IGF4aW9zLmNyZWF0ZSh7YmFzZVVSTDogJ2h0dHBzOi8vYXBpLmtwYWVocy5jb20vdjEnfSlcbiAgICB9XG5cbiAgICBhc3luYyBnZXRBbGxVc2VyKCk6UHJvbWlzZTxLUEFVc2VyTW9kZWxbXT4ge1xuICAgICAgICBsZXQgcmVzdWx0IDogS1BBVXNlck1vZGVsW10gPSBbXTtcbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLmFwaUluc3RhbmNlLnBvc3QoJ3VzZXJzLmxpc3QnLCB7dG9rZW46dGhpcy50b2tlbn0pO1xuICAgICAgICBmb3IgKHZhciB1c2VyRGF0YSBvZiBkYXRhLnVzZXJzKSB7XG4gICAgICAgICAgICBsZXQgdXNlciA9IE9iamVjdC5hc3NpZ24obmV3IEtQQVVzZXJNb2RlbCgpLCB1c2VyRGF0YSk7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh1c2VyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGFzeW5jIHNhdmVVc2VyKHNpdGU6IHN0cmluZywgbW9kZWxzOiBLUEFVc2VyTW9kZWxbXSkgOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSAnU2l0ZSxSZWNvcmRUeXBlLEVtcGxveWVlTnVtYmVyLEZpcnN0TmFtZSxMYXN0TmFtZSxVc2VybmFtZSxJbml0aWFsUGFzc3dvcmQsUm9sZSxUaXRsZSxFbWFpbCxUZXJtaW5hdGlvbkRhdGUsRm9yY2VQYXNzd29yZFNlbGVjdGlvbixTZW5kV2VsY29tZUVtYWlsJztcbiAgICAgICAgdmFyIGNvbnRlbnQgPSBgJHtoZWFkZXJzfWA7XG4gICAgICAgIHZhciBhZGRlZFVzZXJuYW1lIDogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgdmFyIGFkZGVkRW1haWwgOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgICAgIGZvcih2YXIgbW9kZWwgb2YgbW9kZWxzKSB7XG4gICAgICAgICAgICBpZiAoYWRkZWRVc2VybmFtZS5pbmRleE9mKG1vZGVsLnVzZXJuYW1lKSA+IDApIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGFkZGVkRW1haWwuaW5kZXhPZihtb2RlbC5lbWFpbCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFkZGVkVXNlcm5hbWUucHVzaChtb2RlbC51c2VybmFtZSk7XG4gICAgICAgICAgICBhZGRlZEVtYWlsLnB1c2gobW9kZWwuZW1haWwpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgZGF0YVVzZXIgPSBgJHtzaXRlfSxFbXBsb3llZWBcbiAgICAgICAgICAgIGRhdGFVc2VyID0gYCR7ZGF0YVVzZXJ9LCR7SGVscGVyLmNzdkNvbnRlbnRDaGVja2VyKG1vZGVsLmVtcGxveWVlTnVtYmVyKX1gXG4gICAgICAgICAgICBkYXRhVXNlciA9IGAke2RhdGFVc2VyfSwke0hlbHBlci5jc3ZDb250ZW50Q2hlY2tlcihtb2RlbC5maXJzdE5hbWUpfWBcbiAgICAgICAgICAgIGRhdGFVc2VyID0gYCR7ZGF0YVVzZXJ9LCR7SGVscGVyLmNzdkNvbnRlbnRDaGVja2VyKG1vZGVsLmxhc3ROYW1lKX1gXG4gICAgICAgICAgICBkYXRhVXNlciA9IGAke2RhdGFVc2VyfSwke0hlbHBlci5jc3ZDb250ZW50Q2hlY2tlcihtb2RlbC51c2VybmFtZSl9YFxuICAgICAgICAgICAgZGF0YVVzZXIgPSBgJHtkYXRhVXNlcn0sJHtIZWxwZXIuY3N2Q29udGVudENoZWNrZXIobW9kZWwuaW5pdGlhbFBhc3N3b3JkKX1gXG4gICAgICAgICAgICBkYXRhVXNlciA9IGAke2RhdGFVc2VyfSwke0hlbHBlci5jc3ZDb250ZW50Q2hlY2tlcihtb2RlbC5yb2xlKX1gXG4gICAgICAgICAgICBkYXRhVXNlciA9IGAke2RhdGFVc2VyfSwke0hlbHBlci5jc3ZDb250ZW50Q2hlY2tlcihtb2RlbC50aXRsZSl9YFxuICAgICAgICAgICAgZGF0YVVzZXIgPSBgJHtkYXRhVXNlcn0sJHtIZWxwZXIuY3N2Q29udGVudENoZWNrZXIobW9kZWwuZW1haWwpfWBcbiAgICAgICAgICAgIGRhdGFVc2VyID0gYCR7ZGF0YVVzZXJ9LCR7SGVscGVyLmNzdkNvbnRlbnRDaGVja2VyKG1vZGVsLnRlcm1pbmF0aW9uRGF0ZSA/PyAnJyl9YFxuICAgICAgICAgICAgZGF0YVVzZXIgPSBgJHtkYXRhVXNlcn0sJHttb2RlbC5yZXNldFBhc3N3b3JkID8gJ1knOiAnTid9YFxuICAgICAgICAgICAgZGF0YVVzZXIgPSBgJHtkYXRhVXNlcn0sJHttb2RlbC53ZWxjb21lRW1haWwgPyAnWSc6ICdOJ31gXG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBgJHtjb250ZW50fVxcbiR7ZGF0YVVzZXJ9YFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coY29udGVudClcbiAgICAgICAgLy8gcmV0dXJuIHRydWU7XG5cbiAgICAgICAgY29uc3QgZmlsZURhdGEgPSBCdWZmZXIuZnJvbShjb250ZW50LCAnYmluYXJ5JykudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKGNvbnRlbnQpXG4gICAgICAgIFxuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuYXBpSW5zdGFuY2UucG9zdCgnZGF0YWxvYWQuY3JlYXRlJywge1xuICAgICAgICAgICAgdG9rZW46dGhpcy50b2tlbixcbiAgICAgICAgICAgIGZpbGU6IGBkYXRhOnRleHQvY3N2O2Jhc2U2NCwke2ZpbGVEYXRhfWAsXG4gICAgICAgICAgICBmYWlsdXJlRW1haWxzOiBbXSxcbiAgICAgICAgICAgIHN1Y2Nlc3NFbWFpbHM6IFtdXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGEpXG5cbiAgICAgICAgcmV0dXJuIGRhdGEub2s7XG4gICAgfVxuXG59Il19