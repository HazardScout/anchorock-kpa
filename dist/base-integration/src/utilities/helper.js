"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Helper = void 0;
class Helper {
    static csvContentChecker(data) {
        if (data == null) {
            return '';
        }
        let finalData = String(data).trim();
        // Must check for both text characters ('\\r\\n') and actual unicode ('\r\n')
        const regex = /\\r\\n|\r\n|\\r|\\n|\r|\n/g;
        finalData = finalData.replace(regex, ' ');
        if (finalData.indexOf(',') < 0 && finalData.indexOf('"') < 0) {
            return finalData;
        }
        finalData = finalData.replace(/"/g, '""');
        return `"${finalData}"`;
    }
    static formatDatesIfEpoch(incomingDate) {
        if (!incomingDate) {
            return '';
        }
        // if epoch time
        if (typeof incomingDate === 'number' &&
            incomingDate.toString().length >= 10) {
            const date = new Date(incomingDate);
            return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;
        }
        // Return the original value if not epoch time
        return incomingDate;
    }
}
exports.Helper = Helper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vYmFzZS1pbnRlZ3JhdGlvbi9zcmMvdXRpbGl0aWVzL2hlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxNQUFhLE1BQU07SUFDakIsTUFBTSxDQUFDLGlCQUFpQixDQUFDLElBQVk7UUFDbkMsSUFBSSxJQUFJLElBQUksSUFBSSxFQUFFLENBQUM7WUFDakIsT0FBTyxFQUFFLENBQUM7UUFDWixDQUFDO1FBRUQsSUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBRXBDLDZFQUE2RTtRQUM3RSxNQUFNLEtBQUssR0FBRyw0QkFBNEIsQ0FBQztRQUMzQyxTQUFTLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDMUMsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQzdELE9BQU8sU0FBUyxDQUFDO1FBQ25CLENBQUM7UUFFRCxTQUFTLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUMsT0FBTyxJQUFJLFNBQVMsR0FBRyxDQUFDO0lBQzFCLENBQUM7SUFFRCxNQUFNLENBQUMsa0JBQWtCLENBQUMsWUFBNkI7UUFDckQsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ2xCLE9BQU8sRUFBRSxDQUFDO1FBQ1osQ0FBQztRQUNELGdCQUFnQjtRQUNoQixJQUNFLE9BQU8sWUFBWSxLQUFLLFFBQVE7WUFDaEMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sSUFBSSxFQUFFLEVBQ3BDLENBQUM7WUFDRCxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNwQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUM7UUFDMUUsQ0FBQztRQUNELDhDQUE4QztRQUM5QyxPQUFPLFlBQXNCLENBQUM7SUFDaEMsQ0FBQztDQUNGO0FBbENELHdCQWtDQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBIZWxwZXIge1xuICBzdGF0aWMgY3N2Q29udGVudENoZWNrZXIoZGF0YTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAoZGF0YSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgbGV0IGZpbmFsRGF0YSA9IFN0cmluZyhkYXRhKS50cmltKCk7XG5cbiAgICAvLyBNdXN0IGNoZWNrIGZvciBib3RoIHRleHQgY2hhcmFjdGVycyAoJ1xcXFxyXFxcXG4nKSBhbmQgYWN0dWFsIHVuaWNvZGUgKCdcXHJcXG4nKVxuICAgIGNvbnN0IHJlZ2V4ID0gL1xcXFxyXFxcXG58XFxyXFxufFxcXFxyfFxcXFxufFxccnxcXG4vZztcbiAgICBmaW5hbERhdGEgPSBmaW5hbERhdGEucmVwbGFjZShyZWdleCwgJyAnKTtcbiAgICBpZiAoZmluYWxEYXRhLmluZGV4T2YoJywnKSA8IDAgJiYgZmluYWxEYXRhLmluZGV4T2YoJ1wiJykgPCAwKSB7XG4gICAgICByZXR1cm4gZmluYWxEYXRhO1xuICAgIH1cblxuICAgIGZpbmFsRGF0YSA9IGZpbmFsRGF0YS5yZXBsYWNlKC9cIi9nLCAnXCJcIicpO1xuICAgIHJldHVybiBgXCIke2ZpbmFsRGF0YX1cImA7XG4gIH1cblxuICBzdGF0aWMgZm9ybWF0RGF0ZXNJZkVwb2NoKGluY29taW5nRGF0ZTogc3RyaW5nIHwgbnVtYmVyKTogc3RyaW5nIHtcbiAgICBpZiAoIWluY29taW5nRGF0ZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICAvLyBpZiBlcG9jaCB0aW1lXG4gICAgaWYgKFxuICAgICAgdHlwZW9mIGluY29taW5nRGF0ZSA9PT0gJ251bWJlcicgJiZcbiAgICAgIGluY29taW5nRGF0ZS50b1N0cmluZygpLmxlbmd0aCA+PSAxMFxuICAgICkge1xuICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGluY29taW5nRGF0ZSk7XG4gICAgICByZXR1cm4gYCR7ZGF0ZS5nZXRNb250aCgpICsgMX0vJHtkYXRlLmdldERhdGUoKX0vJHtkYXRlLmdldEZ1bGxZZWFyKCl9YDtcbiAgICB9XG4gICAgLy8gUmV0dXJuIHRoZSBvcmlnaW5hbCB2YWx1ZSBpZiBub3QgZXBvY2ggdGltZVxuICAgIHJldHVybiBpbmNvbWluZ0RhdGUgYXMgc3RyaW5nO1xuICB9XG59XG4iXX0=