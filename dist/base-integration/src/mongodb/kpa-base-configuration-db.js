"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KPABaseConfigurationDB = void 0;
const mongodb_1 = require("mongodb");
class KPABaseConfigurationDB {
    constructor() {
        this.mongoDbUrl = `mongodb+srv://${process.env.MONGODB_USERNAME}:${process.env.MONGODB_PASSWORD}@${process.env.MONGODB_URL}/?authMechanism=DEFAULT`;
    }
    async getConfiguration(filter = {}) {
        let result = [];
        const mongoClient = await mongodb_1.MongoClient.connect(this.mongoDbUrl);
        const mongoDb = mongoClient.db(`${process.env.MONGODB_DBNAME}`);
        let mongoDbCollection = mongoDb.collection(this.collectionName);
        const findResult = await mongoDbCollection.find(filter).toArray();
        for (var data of findResult) {
            result.push(this.convertData(data));
        }
        await mongoClient.close();
        return result;
    }
    async getConfigurationByKpaToken(kpaToken) {
        let result = [];
        const mongoClient = await mongodb_1.MongoClient.connect(this.mongoDbUrl);
        const mongoDb = mongoClient.db(`${process.env.MONGODB_DBNAME}`);
        let mongoDbCollection = mongoDb.collection(this.collectionName);
        const findResult = await mongoDbCollection.find({ kpa_token: kpaToken }).toArray();
        for (var data of findResult) {
            result.push(this.convertData(data));
        }
        await mongoClient.close();
        if (result.length == 0) {
            return null;
        }
        return result[0];
    }
    async save(model) {
        const mongoClient = await mongodb_1.MongoClient.connect(this.mongoDbUrl);
        const mongoDb = mongoClient.db(`${process.env.MONGODB_DBNAME}`);
        let mongoDbCollection = mongoDb.collection(this.collectionName);
        const doc = model === null || model === void 0 ? void 0 : model.syncChanges();
        if (!doc) {
            throw new Error('no document to save');
        }
        const filter = { kpa_token: doc.kpa_token };
        const count = await mongoDbCollection.count(filter);
        if (count) {
            await mongoDbCollection.updateOne(filter, {
                $set: doc
            });
        }
        else {
            await mongoDbCollection.insertOne(doc);
        }
        await mongoClient.close();
        return model;
    }
}
exports.KPABaseConfigurationDB = KPABaseConfigurationDB;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia3BhLWJhc2UtY29uZmlndXJhdGlvbi1kYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2Jhc2UtaW50ZWdyYXRpb24vc3JjL21vbmdvZGIva3BhLWJhc2UtY29uZmlndXJhdGlvbi1kYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBZ0Q7QUFHaEQsTUFBc0Isc0JBQXNCO0lBSXhDO1FBQ0ksSUFBSSxDQUFDLFVBQVUsR0FBRyxpQkFBaUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyx5QkFBeUIsQ0FBQztJQUN4SixDQUFDO0lBRUQsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFNBQWEsRUFBRTtRQUNsQyxJQUFJLE1BQU0sR0FBUSxFQUFFLENBQUE7UUFDcEIsTUFBTSxXQUFXLEdBQUcsTUFBTSxxQkFBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDL0QsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUVoRSxJQUFJLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sVUFBVSxHQUFHLE1BQU0saUJBQWlCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2xFLEtBQUksSUFBSSxJQUFJLElBQUksVUFBVSxFQUFFLENBQUM7WUFDekIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7UUFDdkMsQ0FBQztRQUVELE1BQU0sV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTFCLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxLQUFLLENBQUMsMEJBQTBCLENBQUMsUUFBZ0I7UUFDN0MsSUFBSSxNQUFNLEdBQVEsRUFBRSxDQUFBO1FBQ3BCLE1BQU0sV0FBVyxHQUFHLE1BQU0scUJBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQy9ELE1BQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7UUFFaEUsSUFBSSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNoRSxNQUFNLFVBQVUsR0FBRyxNQUFNLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2pGLEtBQUksSUFBSSxJQUFJLElBQUksVUFBVSxFQUFFLENBQUM7WUFDekIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7UUFDdkMsQ0FBQztRQUVELE1BQU0sV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTFCLElBQUksTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUNyQixPQUFPLElBQUksQ0FBQTtRQUNmLENBQUM7UUFFRCxPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNwQixDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFnQztRQUN2QyxNQUFNLFdBQVcsR0FBRyxNQUFNLHFCQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvRCxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFBO1FBQy9ELElBQUksaUJBQWlCLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFaEUsTUFBTSxHQUFHLEdBQUcsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLFdBQVcsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNQLE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUMzQyxDQUFDO1FBRUQsTUFBTSxNQUFNLEdBQUcsRUFBRSxTQUFTLEVBQUUsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzVDLE1BQU0sS0FBSyxHQUFHLE1BQU0saUJBQWlCLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXBELElBQUksS0FBSyxFQUFFLENBQUM7WUFDUixNQUFNLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUU7Z0JBQ3RDLElBQUksRUFBRSxHQUFHO2FBQ1osQ0FBQyxDQUFDO1FBQ1AsQ0FBQzthQUFNLENBQUM7WUFDSixNQUFNLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQyxDQUFDO1FBRUQsTUFBTSxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDMUIsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztDQUdKO0FBdEVELHdEQXNFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERvY3VtZW50LCBNb25nb0NsaWVudCB9IGZyb20gXCJtb25nb2RiXCI7XG5pbXBvcnQgeyBLUEFCYXNlQ29uZmlndXJhdGlvbk1vZGVsIH0gZnJvbSBcIi4uL21vZGVsXCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBLUEFCYXNlQ29uZmlndXJhdGlvbkRCPFQ+IHtcbiAgICBtb25nb0RiVXJsOiBzdHJpbmc7XG4gICAgYWJzdHJhY3QgY29sbGVjdGlvbk5hbWU6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm1vbmdvRGJVcmwgPSBgbW9uZ29kYitzcnY6Ly8ke3Byb2Nlc3MuZW52Lk1PTkdPREJfVVNFUk5BTUV9OiR7cHJvY2Vzcy5lbnYuTU9OR09EQl9QQVNTV09SRH1AJHtwcm9jZXNzLmVudi5NT05HT0RCX1VSTH0vP2F1dGhNZWNoYW5pc209REVGQVVMVGA7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0Q29uZmlndXJhdGlvbihmaWx0ZXI6YW55ID0ge30pIDogUHJvbWlzZTxUW10+IHtcbiAgICAgICAgbGV0IHJlc3VsdDogVFtdID0gW11cbiAgICAgICAgY29uc3QgbW9uZ29DbGllbnQgPSBhd2FpdCBNb25nb0NsaWVudC5jb25uZWN0KHRoaXMubW9uZ29EYlVybCk7XG4gICAgICAgIGNvbnN0IG1vbmdvRGIgPSBtb25nb0NsaWVudC5kYihgJHtwcm9jZXNzLmVudi5NT05HT0RCX0RCTkFNRX1gKTtcblxuICAgICAgICBsZXQgbW9uZ29EYkNvbGxlY3Rpb24gPSBtb25nb0RiLmNvbGxlY3Rpb24odGhpcy5jb2xsZWN0aW9uTmFtZSk7XG4gICAgICAgIGNvbnN0IGZpbmRSZXN1bHQgPSBhd2FpdCBtb25nb0RiQ29sbGVjdGlvbi5maW5kKGZpbHRlcikudG9BcnJheSgpO1xuICAgICAgICBmb3IodmFyIGRhdGEgb2YgZmluZFJlc3VsdCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5jb252ZXJ0RGF0YShkYXRhKSlcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IG1vbmdvQ2xpZW50LmNsb3NlKCk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRDb25maWd1cmF0aW9uQnlLcGFUb2tlbihrcGFUb2tlbjogU3RyaW5nKSA6IFByb21pc2U8VCB8IG51bGw+IHtcbiAgICAgICAgbGV0IHJlc3VsdDogVFtdID0gW11cbiAgICAgICAgY29uc3QgbW9uZ29DbGllbnQgPSBhd2FpdCBNb25nb0NsaWVudC5jb25uZWN0KHRoaXMubW9uZ29EYlVybCk7XG4gICAgICAgIGNvbnN0IG1vbmdvRGIgPSBtb25nb0NsaWVudC5kYihgJHtwcm9jZXNzLmVudi5NT05HT0RCX0RCTkFNRX1gKTtcblxuICAgICAgICBsZXQgbW9uZ29EYkNvbGxlY3Rpb24gPSBtb25nb0RiLmNvbGxlY3Rpb24odGhpcy5jb2xsZWN0aW9uTmFtZSk7XG4gICAgICAgIGNvbnN0IGZpbmRSZXN1bHQgPSBhd2FpdCBtb25nb0RiQ29sbGVjdGlvbi5maW5kKHtrcGFfdG9rZW46IGtwYVRva2VufSkudG9BcnJheSgpO1xuICAgICAgICBmb3IodmFyIGRhdGEgb2YgZmluZFJlc3VsdCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5jb252ZXJ0RGF0YShkYXRhKSlcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IG1vbmdvQ2xpZW50LmNsb3NlKCk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHRbMF1cbiAgICB9XG5cbiAgICBhc3luYyBzYXZlKG1vZGVsOiBLUEFCYXNlQ29uZmlndXJhdGlvbk1vZGVsKSA6IFByb21pc2U8S1BBQmFzZUNvbmZpZ3VyYXRpb25Nb2RlbD4ge1xuICAgICAgICBjb25zdCBtb25nb0NsaWVudCA9IGF3YWl0IE1vbmdvQ2xpZW50LmNvbm5lY3QodGhpcy5tb25nb0RiVXJsKTtcbiAgICAgICAgY29uc3QgbW9uZ29EYiA9IG1vbmdvQ2xpZW50LmRiKGAke3Byb2Nlc3MuZW52Lk1PTkdPREJfREJOQU1FfWApXG4gICAgICAgIGxldCBtb25nb0RiQ29sbGVjdGlvbiA9IG1vbmdvRGIuY29sbGVjdGlvbih0aGlzLmNvbGxlY3Rpb25OYW1lKTtcblxuICAgICAgICBjb25zdCBkb2MgPSBtb2RlbD8uc3luY0NoYW5nZXMoKTtcbiAgICAgICAgaWYgKCFkb2MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm8gZG9jdW1lbnQgdG8gc2F2ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmlsdGVyID0geyBrcGFfdG9rZW46IGRvYy5rcGFfdG9rZW4gfTtcbiAgICAgICAgY29uc3QgY291bnQgPSBhd2FpdCBtb25nb0RiQ29sbGVjdGlvbi5jb3VudChmaWx0ZXIpO1xuXG4gICAgICAgIGlmIChjb3VudCkge1xuICAgICAgICAgICAgYXdhaXQgbW9uZ29EYkNvbGxlY3Rpb24udXBkYXRlT25lKGZpbHRlciwge1xuICAgICAgICAgICAgICAgICRzZXQ6IGRvY1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCBtb25nb0RiQ29sbGVjdGlvbi5pbnNlcnRPbmUoZG9jKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IG1vbmdvQ2xpZW50LmNsb3NlKCk7XG4gICAgICAgIHJldHVybiBtb2RlbDtcbiAgICB9XG5cbiAgICBhYnN0cmFjdCBjb252ZXJ0RGF0YShkYXRhOiBEb2N1bWVudCkgOiBUO1xufVxuIl19