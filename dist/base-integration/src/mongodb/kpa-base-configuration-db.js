"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KPABaseConfigurationDB = void 0;
const mongodb_1 = require("mongodb");
class KPABaseConfigurationDB {
    constructor() {
        this.mongoDbUrl = process.env.KPA_INTEGRATIONS_DB || 'no-database-found';
    }
    async getConfiguration(filter = {}) {
        let result = [];
        const mongoClient = await mongodb_1.MongoClient.connect(this.mongoDbUrl);
        const mongoDb = mongoClient.db(`${process.env.MONGODB_DBNAME}`);
        let mongoDbCollection = mongoDb.collection(this.collectionName);
        const findResult = await mongoDbCollection.find(filter).toArray();
        for (var data of findResult) {
            result.push(this.convertData(data));
        }
        await mongoClient.close();
        return result;
    }
    async getConfigurationByKpaToken(kpaToken) {
        let result = [];
        const mongoClient = await mongodb_1.MongoClient.connect(this.mongoDbUrl);
        const mongoDb = mongoClient.db(`${process.env.MONGODB_DBNAME}`);
        let mongoDbCollection = mongoDb.collection(this.collectionName);
        const findResult = await mongoDbCollection.find({ kpa_token: kpaToken }).toArray();
        for (var data of findResult) {
            result.push(this.convertData(data));
        }
        await mongoClient.close();
        if (result.length == 0) {
            return null;
        }
        return result[0];
    }
    async save(model) {
        const mongoClient = await mongodb_1.MongoClient.connect(this.mongoDbUrl);
        const mongoDb = mongoClient.db(`${process.env.MONGODB_DBNAME}`);
        let mongoDbCollection = mongoDb.collection(this.collectionName);
        const doc = model === null || model === void 0 ? void 0 : model.syncChanges();
        if (!doc) {
            throw new Error('no document to save');
        }
        const filter = { kpa_token: doc.kpa_token };
        const count = await mongoDbCollection.count(filter);
        if (count) {
            await mongoDbCollection.updateOne(filter, {
                $set: doc
            });
        }
        else {
            await mongoDbCollection.insertOne(doc);
        }
        await mongoClient.close();
        return model;
    }
}
exports.KPABaseConfigurationDB = KPABaseConfigurationDB;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia3BhLWJhc2UtY29uZmlndXJhdGlvbi1kYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2Jhc2UtaW50ZWdyYXRpb24vc3JjL21vbmdvZGIva3BhLWJhc2UtY29uZmlndXJhdGlvbi1kYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBZ0Q7QUFHaEQsTUFBc0Isc0JBQXNCO0lBSXhDO1FBQ0ksSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixJQUFJLG1CQUFtQixDQUFDO0lBQzdFLENBQUM7SUFFRCxLQUFLLENBQUMsZ0JBQWdCLENBQUMsU0FBYSxFQUFFO1FBQ2xDLElBQUksTUFBTSxHQUFRLEVBQUUsQ0FBQTtRQUNwQixNQUFNLFdBQVcsR0FBRyxNQUFNLHFCQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvRCxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO1FBRWhFLElBQUksaUJBQWlCLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDaEUsTUFBTSxVQUFVLEdBQUcsTUFBTSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDbEUsS0FBSSxJQUFJLElBQUksSUFBSSxVQUFVLEVBQUUsQ0FBQztZQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUN2QyxDQUFDO1FBRUQsTUFBTSxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFMUIsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVELEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxRQUFnQjtRQUM3QyxJQUFJLE1BQU0sR0FBUSxFQUFFLENBQUE7UUFDcEIsTUFBTSxXQUFXLEdBQUcsTUFBTSxxQkFBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDL0QsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUVoRSxJQUFJLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sVUFBVSxHQUFHLE1BQU0saUJBQWlCLENBQUMsSUFBSSxDQUFDLEVBQUMsU0FBUyxFQUFFLFFBQVEsRUFBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDakYsS0FBSSxJQUFJLElBQUksSUFBSSxVQUFVLEVBQUUsQ0FBQztZQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUN2QyxDQUFDO1FBRUQsTUFBTSxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFMUIsSUFBSSxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQ3JCLE9BQU8sSUFBSSxDQUFBO1FBQ2YsQ0FBQztRQUVELE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3BCLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQWdDO1FBQ3ZDLE1BQU0sV0FBVyxHQUFHLE1BQU0scUJBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQy9ELE1BQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUE7UUFDL0QsSUFBSSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUVoRSxNQUFNLEdBQUcsR0FBRyxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsV0FBVyxFQUFFLENBQUM7UUFDakMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ1AsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQzNDLENBQUM7UUFFRCxNQUFNLE1BQU0sR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDNUMsTUFBTSxLQUFLLEdBQUcsTUFBTSxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFcEQsSUFBSSxLQUFLLEVBQUUsQ0FBQztZQUNSLE1BQU0saUJBQWlCLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRTtnQkFDdEMsSUFBSSxFQUFFLEdBQUc7YUFDWixDQUFDLENBQUM7UUFDUCxDQUFDO2FBQU0sQ0FBQztZQUNKLE1BQU0saUJBQWlCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNDLENBQUM7UUFFRCxNQUFNLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMxQixPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0NBR0o7QUF0RUQsd0RBc0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG9jdW1lbnQsIE1vbmdvQ2xpZW50IH0gZnJvbSBcIm1vbmdvZGJcIjtcbmltcG9ydCB7IEtQQUJhc2VDb25maWd1cmF0aW9uTW9kZWwgfSBmcm9tIFwiLi4vbW9kZWxcIjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEtQQUJhc2VDb25maWd1cmF0aW9uREI8VD4ge1xuICAgIG1vbmdvRGJVcmw6IHN0cmluZztcbiAgICBhYnN0cmFjdCBjb2xsZWN0aW9uTmFtZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubW9uZ29EYlVybCA9IHByb2Nlc3MuZW52LktQQV9JTlRFR1JBVElPTlNfREIgfHwgJ25vLWRhdGFiYXNlLWZvdW5kJztcbiAgICB9XG5cbiAgICBhc3luYyBnZXRDb25maWd1cmF0aW9uKGZpbHRlcjphbnkgPSB7fSkgOiBQcm9taXNlPFRbXT4ge1xuICAgICAgICBsZXQgcmVzdWx0OiBUW10gPSBbXVxuICAgICAgICBjb25zdCBtb25nb0NsaWVudCA9IGF3YWl0IE1vbmdvQ2xpZW50LmNvbm5lY3QodGhpcy5tb25nb0RiVXJsKTtcbiAgICAgICAgY29uc3QgbW9uZ29EYiA9IG1vbmdvQ2xpZW50LmRiKGAke3Byb2Nlc3MuZW52Lk1PTkdPREJfREJOQU1FfWApO1xuXG4gICAgICAgIGxldCBtb25nb0RiQ29sbGVjdGlvbiA9IG1vbmdvRGIuY29sbGVjdGlvbih0aGlzLmNvbGxlY3Rpb25OYW1lKTtcbiAgICAgICAgY29uc3QgZmluZFJlc3VsdCA9IGF3YWl0IG1vbmdvRGJDb2xsZWN0aW9uLmZpbmQoZmlsdGVyKS50b0FycmF5KCk7XG4gICAgICAgIGZvcih2YXIgZGF0YSBvZiBmaW5kUmVzdWx0KSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh0aGlzLmNvbnZlcnREYXRhKGRhdGEpKVxuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgbW9uZ29DbGllbnQuY2xvc2UoKTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGFzeW5jIGdldENvbmZpZ3VyYXRpb25CeUtwYVRva2VuKGtwYVRva2VuOiBTdHJpbmcpIDogUHJvbWlzZTxUIHwgbnVsbD4ge1xuICAgICAgICBsZXQgcmVzdWx0OiBUW10gPSBbXVxuICAgICAgICBjb25zdCBtb25nb0NsaWVudCA9IGF3YWl0IE1vbmdvQ2xpZW50LmNvbm5lY3QodGhpcy5tb25nb0RiVXJsKTtcbiAgICAgICAgY29uc3QgbW9uZ29EYiA9IG1vbmdvQ2xpZW50LmRiKGAke3Byb2Nlc3MuZW52Lk1PTkdPREJfREJOQU1FfWApO1xuXG4gICAgICAgIGxldCBtb25nb0RiQ29sbGVjdGlvbiA9IG1vbmdvRGIuY29sbGVjdGlvbih0aGlzLmNvbGxlY3Rpb25OYW1lKTtcbiAgICAgICAgY29uc3QgZmluZFJlc3VsdCA9IGF3YWl0IG1vbmdvRGJDb2xsZWN0aW9uLmZpbmQoe2twYV90b2tlbjoga3BhVG9rZW59KS50b0FycmF5KCk7XG4gICAgICAgIGZvcih2YXIgZGF0YSBvZiBmaW5kUmVzdWx0KSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh0aGlzLmNvbnZlcnREYXRhKGRhdGEpKVxuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgbW9uZ29DbGllbnQuY2xvc2UoKTtcblxuICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdFswXVxuICAgIH1cblxuICAgIGFzeW5jIHNhdmUobW9kZWw6IEtQQUJhc2VDb25maWd1cmF0aW9uTW9kZWwpIDogUHJvbWlzZTxLUEFCYXNlQ29uZmlndXJhdGlvbk1vZGVsPiB7XG4gICAgICAgIGNvbnN0IG1vbmdvQ2xpZW50ID0gYXdhaXQgTW9uZ29DbGllbnQuY29ubmVjdCh0aGlzLm1vbmdvRGJVcmwpO1xuICAgICAgICBjb25zdCBtb25nb0RiID0gbW9uZ29DbGllbnQuZGIoYCR7cHJvY2Vzcy5lbnYuTU9OR09EQl9EQk5BTUV9YClcbiAgICAgICAgbGV0IG1vbmdvRGJDb2xsZWN0aW9uID0gbW9uZ29EYi5jb2xsZWN0aW9uKHRoaXMuY29sbGVjdGlvbk5hbWUpO1xuXG4gICAgICAgIGNvbnN0IGRvYyA9IG1vZGVsPy5zeW5jQ2hhbmdlcygpO1xuICAgICAgICBpZiAoIWRvYykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdubyBkb2N1bWVudCB0byBzYXZlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmaWx0ZXIgPSB7IGtwYV90b2tlbjogZG9jLmtwYV90b2tlbiB9O1xuICAgICAgICBjb25zdCBjb3VudCA9IGF3YWl0IG1vbmdvRGJDb2xsZWN0aW9uLmNvdW50KGZpbHRlcik7XG5cbiAgICAgICAgaWYgKGNvdW50KSB7XG4gICAgICAgICAgICBhd2FpdCBtb25nb0RiQ29sbGVjdGlvbi51cGRhdGVPbmUoZmlsdGVyLCB7XG4gICAgICAgICAgICAgICAgJHNldDogZG9jXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGF3YWl0IG1vbmdvRGJDb2xsZWN0aW9uLmluc2VydE9uZShkb2MpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgbW9uZ29DbGllbnQuY2xvc2UoKTtcbiAgICAgICAgcmV0dXJuIG1vZGVsO1xuICAgIH1cblxuICAgIGFic3RyYWN0IGNvbnZlcnREYXRhKGRhdGE6IERvY3VtZW50KSA6IFQ7XG59XG4iXX0=