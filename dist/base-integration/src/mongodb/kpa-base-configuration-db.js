"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KPABaseConfigurationDB = void 0;
const mongodb_1 = require("mongodb");
class KPABaseConfigurationDB {
    constructor() {
        this.mongoDbUrl = process.env.KPA_INTEGRATIONS_DB || 'no-database-found';
    }
    async getConfiguration(filter = {}) {
        let result = [];
        const mongoClient = await mongodb_1.MongoClient.connect(this.mongoDbUrl);
        const mongoDb = mongoClient.db();
        let mongoDbCollection = mongoDb.collection(this.collectionName);
        const findResult = await mongoDbCollection.find(filter).toArray();
        for (var data of findResult) {
            result.push(this.convertData(data));
        }
        await mongoClient.close();
        return result;
    }
    async getConfigurationByKpaToken(kpaToken) {
        let result = [];
        const mongoClient = await mongodb_1.MongoClient.connect(this.mongoDbUrl);
        const mongoDb = mongoClient.db();
        let mongoDbCollection = mongoDb.collection(this.collectionName);
        const findResult = await mongoDbCollection.find({ kpa_token: kpaToken }).toArray();
        for (var data of findResult) {
            result.push(this.convertData(data));
        }
        await mongoClient.close();
        if (result.length == 0) {
            return null;
        }
        return result[0];
    }
    async save(model) {
        const mongoClient = await mongodb_1.MongoClient.connect(this.mongoDbUrl);
        const mongoDb = mongoClient.db();
        let mongoDbCollection = mongoDb.collection(this.collectionName);
        const doc = model === null || model === void 0 ? void 0 : model.syncChanges();
        if (!doc) {
            throw new Error('no document to save');
        }
        const filter = { kpa_token: doc.kpa_token };
        const count = await mongoDbCollection.count(filter);
        if (count) {
            await mongoDbCollection.updateOne(filter, {
                $set: doc
            });
        }
        else {
            await mongoDbCollection.insertOne(doc);
        }
        await mongoClient.close();
        return model;
    }
}
exports.KPABaseConfigurationDB = KPABaseConfigurationDB;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia3BhLWJhc2UtY29uZmlndXJhdGlvbi1kYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2Jhc2UtaW50ZWdyYXRpb24vc3JjL21vbmdvZGIva3BhLWJhc2UtY29uZmlndXJhdGlvbi1kYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBZ0Q7QUFHaEQsTUFBc0Isc0JBQXNCO0lBSXhDO1FBQ0ksSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixJQUFJLG1CQUFtQixDQUFDO0lBQzdFLENBQUM7SUFFRCxLQUFLLENBQUMsZ0JBQWdCLENBQUMsU0FBYSxFQUFFO1FBQ2xDLElBQUksTUFBTSxHQUFRLEVBQUUsQ0FBQTtRQUNwQixNQUFNLFdBQVcsR0FBRyxNQUFNLHFCQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvRCxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsRUFBRSxFQUFFLENBQUM7UUFFakMsSUFBSSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNoRSxNQUFNLFVBQVUsR0FBRyxNQUFNLGlCQUFpQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNsRSxLQUFJLElBQUksSUFBSSxJQUFJLFVBQVUsRUFBRSxDQUFDO1lBQ3pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBQ3ZDLENBQUM7UUFFRCxNQUFNLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUUxQixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQsS0FBSyxDQUFDLDBCQUEwQixDQUFDLFFBQWdCO1FBQzdDLElBQUksTUFBTSxHQUFRLEVBQUUsQ0FBQTtRQUNwQixNQUFNLFdBQVcsR0FBRyxNQUFNLHFCQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvRCxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsRUFBRSxFQUFFLENBQUM7UUFFakMsSUFBSSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNoRSxNQUFNLFVBQVUsR0FBRyxNQUFNLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2pGLEtBQUksSUFBSSxJQUFJLElBQUksVUFBVSxFQUFFLENBQUM7WUFDekIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7UUFDdkMsQ0FBQztRQUVELE1BQU0sV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTFCLElBQUksTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUNyQixPQUFPLElBQUksQ0FBQTtRQUNmLENBQUM7UUFFRCxPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNwQixDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFnQztRQUN2QyxNQUFNLFdBQVcsR0FBRyxNQUFNLHFCQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvRCxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDakMsSUFBSSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUVoRSxNQUFNLEdBQUcsR0FBRyxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsV0FBVyxFQUFFLENBQUM7UUFDakMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ1AsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQzNDLENBQUM7UUFFRCxNQUFNLE1BQU0sR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDNUMsTUFBTSxLQUFLLEdBQUcsTUFBTSxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFcEQsSUFBSSxLQUFLLEVBQUUsQ0FBQztZQUNSLE1BQU0saUJBQWlCLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRTtnQkFDdEMsSUFBSSxFQUFFLEdBQUc7YUFDWixDQUFDLENBQUM7UUFDUCxDQUFDO2FBQU0sQ0FBQztZQUNKLE1BQU0saUJBQWlCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNDLENBQUM7UUFFRCxNQUFNLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMxQixPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0NBR0o7QUF0RUQsd0RBc0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG9jdW1lbnQsIE1vbmdvQ2xpZW50IH0gZnJvbSBcIm1vbmdvZGJcIjtcbmltcG9ydCB7IEtQQUJhc2VDb25maWd1cmF0aW9uTW9kZWwgfSBmcm9tIFwiLi4vbW9kZWxcIjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEtQQUJhc2VDb25maWd1cmF0aW9uREI8VD4ge1xuICAgIG1vbmdvRGJVcmw6IHN0cmluZztcbiAgICBhYnN0cmFjdCBjb2xsZWN0aW9uTmFtZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubW9uZ29EYlVybCA9IHByb2Nlc3MuZW52LktQQV9JTlRFR1JBVElPTlNfREIgfHwgJ25vLWRhdGFiYXNlLWZvdW5kJztcbiAgICB9XG5cbiAgICBhc3luYyBnZXRDb25maWd1cmF0aW9uKGZpbHRlcjphbnkgPSB7fSkgOiBQcm9taXNlPFRbXT4ge1xuICAgICAgICBsZXQgcmVzdWx0OiBUW10gPSBbXVxuICAgICAgICBjb25zdCBtb25nb0NsaWVudCA9IGF3YWl0IE1vbmdvQ2xpZW50LmNvbm5lY3QodGhpcy5tb25nb0RiVXJsKTtcbiAgICAgICAgY29uc3QgbW9uZ29EYiA9IG1vbmdvQ2xpZW50LmRiKCk7XG5cbiAgICAgICAgbGV0IG1vbmdvRGJDb2xsZWN0aW9uID0gbW9uZ29EYi5jb2xsZWN0aW9uKHRoaXMuY29sbGVjdGlvbk5hbWUpO1xuICAgICAgICBjb25zdCBmaW5kUmVzdWx0ID0gYXdhaXQgbW9uZ29EYkNvbGxlY3Rpb24uZmluZChmaWx0ZXIpLnRvQXJyYXkoKTtcbiAgICAgICAgZm9yKHZhciBkYXRhIG9mIGZpbmRSZXN1bHQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMuY29udmVydERhdGEoZGF0YSkpXG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCBtb25nb0NsaWVudC5jbG9zZSgpO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0Q29uZmlndXJhdGlvbkJ5S3BhVG9rZW4oa3BhVG9rZW46IFN0cmluZykgOiBQcm9taXNlPFQgfCBudWxsPiB7XG4gICAgICAgIGxldCByZXN1bHQ6IFRbXSA9IFtdXG4gICAgICAgIGNvbnN0IG1vbmdvQ2xpZW50ID0gYXdhaXQgTW9uZ29DbGllbnQuY29ubmVjdCh0aGlzLm1vbmdvRGJVcmwpO1xuICAgICAgICBjb25zdCBtb25nb0RiID0gbW9uZ29DbGllbnQuZGIoKTtcblxuICAgICAgICBsZXQgbW9uZ29EYkNvbGxlY3Rpb24gPSBtb25nb0RiLmNvbGxlY3Rpb24odGhpcy5jb2xsZWN0aW9uTmFtZSk7XG4gICAgICAgIGNvbnN0IGZpbmRSZXN1bHQgPSBhd2FpdCBtb25nb0RiQ29sbGVjdGlvbi5maW5kKHtrcGFfdG9rZW46IGtwYVRva2VufSkudG9BcnJheSgpO1xuICAgICAgICBmb3IodmFyIGRhdGEgb2YgZmluZFJlc3VsdCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5jb252ZXJ0RGF0YShkYXRhKSlcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IG1vbmdvQ2xpZW50LmNsb3NlKCk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHRbMF1cbiAgICB9XG5cbiAgICBhc3luYyBzYXZlKG1vZGVsOiBLUEFCYXNlQ29uZmlndXJhdGlvbk1vZGVsKSA6IFByb21pc2U8S1BBQmFzZUNvbmZpZ3VyYXRpb25Nb2RlbD4ge1xuICAgICAgICBjb25zdCBtb25nb0NsaWVudCA9IGF3YWl0IE1vbmdvQ2xpZW50LmNvbm5lY3QodGhpcy5tb25nb0RiVXJsKTtcbiAgICAgICAgY29uc3QgbW9uZ29EYiA9IG1vbmdvQ2xpZW50LmRiKCk7XG4gICAgICAgIGxldCBtb25nb0RiQ29sbGVjdGlvbiA9IG1vbmdvRGIuY29sbGVjdGlvbih0aGlzLmNvbGxlY3Rpb25OYW1lKTtcblxuICAgICAgICBjb25zdCBkb2MgPSBtb2RlbD8uc3luY0NoYW5nZXMoKTtcbiAgICAgICAgaWYgKCFkb2MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm8gZG9jdW1lbnQgdG8gc2F2ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmlsdGVyID0geyBrcGFfdG9rZW46IGRvYy5rcGFfdG9rZW4gfTtcbiAgICAgICAgY29uc3QgY291bnQgPSBhd2FpdCBtb25nb0RiQ29sbGVjdGlvbi5jb3VudChmaWx0ZXIpO1xuXG4gICAgICAgIGlmIChjb3VudCkge1xuICAgICAgICAgICAgYXdhaXQgbW9uZ29EYkNvbGxlY3Rpb24udXBkYXRlT25lKGZpbHRlciwge1xuICAgICAgICAgICAgICAgICRzZXQ6IGRvY1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCBtb25nb0RiQ29sbGVjdGlvbi5pbnNlcnRPbmUoZG9jKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IG1vbmdvQ2xpZW50LmNsb3NlKCk7XG4gICAgICAgIHJldHVybiBtb2RlbDtcbiAgICB9XG5cbiAgICBhYnN0cmFjdCBjb252ZXJ0RGF0YShkYXRhOiBEb2N1bWVudCkgOiBUO1xufVxuIl19